/*
 * test checkbox API
 * Core API of Software Registrar of Settlement Operations
 *
 * OpenAPI spec version: 0.1.26
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ua.checkbox.j8client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.PostProcessor;
import io.gsonfire.TypeSelector;
import ua.checkbox.j8client.JSON.PaymentsInstanceCreator;
import ua.checkbox.j8client.model.*;

import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Map;
import java.util.HashMap;

public class JSON {

	private Gson gson;
    private boolean isLenientOnJson = false;
    private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();

    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
//          .registerTypeSelector(DiscountMode.class, new TypeSelector<DiscountMode>() {
//            @Override
//            public Class<? extends DiscountMode> getClassForElement(JsonElement readElement) {
//                Map<String, Class<? extends DiscountMode>> classByDiscriminatorValue = new HashMap<>();
//                    classByDiscriminatorValue.put("DiscountMode".toUpperCase(), DiscountMode.class);
//                return getClassByDiscriminator(
//                            classByDiscriminatorValue,
//                            getDiscriminatorValue(readElement, ""));
//            }
//          })
//          .registerPostProcessor(DiscountMode.class, new PostProcessor<DiscountMode>() {
//              @Override
//              public void postDeserialize(DiscountMode result, JsonElement src, Gson gson) {
//
//              }
//
//              @Override
//              public void postSerialize(JsonElement result, DiscountMode src, Gson gson) {
//                  Map<Class<? extends DiscountMode>, String> discriminatorValueByClass = new HashMap<>();
//                      discriminatorValueByClass.put(DiscountMode.class, "DiscountMode");
//                  if(result instanceof JsonObject)
//                  {
//                      if(!((JsonObject) result).has(""))
//                      {
//                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
//                      }
//                  }
//              }
//          })
//          .registerTypeSelector(DiscountType.class, new TypeSelector<DiscountType>() {
//            @Override
//            public Class<? extends DiscountType> getClassForElement(JsonElement readElement) {
//                Map<String, Class<? extends DiscountType>> classByDiscriminatorValue = new HashMap<>();
//                    classByDiscriminatorValue.put("DiscountType".toUpperCase(), DiscountType.class);
//                return getClassByDiscriminator(
//                            classByDiscriminatorValue,
//                            getDiscriminatorValue(readElement, ""));
//            }
//          })
//          .registerPostProcessor(DiscountType.class, new PostProcessor<DiscountType>() {
//              @Override
//              public void postDeserialize(DiscountType result, JsonElement src, Gson gson) {
//
//              }
//
//              @Override
//              public void postSerialize(JsonElement result, DiscountType src, Gson gson) {
//                  Map<Class<? extends DiscountType>, String> discriminatorValueByClass = new HashMap<>();
//                      discriminatorValueByClass.put(DiscountType.class, "DiscountType");
//                  if(result instanceof JsonObject)
//                  {
//                      if(!((JsonObject) result).has(""))
//                      {
//                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
//                      }
//                  }
//              }
//          })
//          .registerTypeSelector(PaymentType.class, new TypeSelector<PaymentType>() {
//            @Override
//            public Class<? extends PaymentType> getClassForElement(JsonElement readElement) {
//                Map<String, Class<? extends PaymentType>> classByDiscriminatorValue = new HashMap<>();
//                    classByDiscriminatorValue.put("PaymentType".toUpperCase(), PaymentType.class);
//                return getClassByDiscriminator(
//                            classByDiscriminatorValue,
//                            getDiscriminatorValue(readElement, ""));
//            }
//          })
//          .registerPostProcessor(PaymentType.class, new PostProcessor<PaymentType>() {
//              @Override
//              public void postDeserialize(PaymentType result, JsonElement src, Gson gson) {
//
//              }
//
//              @Override
//              public void postSerialize(JsonElement result, PaymentType src, Gson gson) {
//                  Map<Class<? extends PaymentType>, String> discriminatorValueByClass = new HashMap<>();
//                      discriminatorValueByClass.put(PaymentType.class, "PaymentType");
//                  if(result instanceof JsonObject)
//                  {
//                      if(!((JsonObject) result).has(""))
//                      {
//                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
//                      }
//                  }
//              }
//          })
//          .registerTypeSelector(ReportPayload.class, new TypeSelector<ReportPayload>() {
//            @Override
//            public Class<? extends ReportPayload> getClassForElement(JsonElement readElement) {
//                Map<String, Class<? extends ReportPayload>> classByDiscriminatorValue = new HashMap<>();
//                    classByDiscriminatorValue.put("AllOfCloseShiftPayloadReport".toUpperCase(), AllOfCloseShiftPayloadReport.class);
//                    classByDiscriminatorValue.put("AllOfShortCloseShiftPayloadReport".toUpperCase(), AllOfShortCloseShiftPayloadReport.class);
//                    classByDiscriminatorValue.put("ReportPayload".toUpperCase(), ReportPayload.class);
//                return getClassByDiscriminator(
//                            classByDiscriminatorValue,
//                            getDiscriminatorValue(readElement, ""));
//            }
//          })
//          .registerPostProcessor(ReportPayload.class, new PostProcessor<ReportPayload>() {
//              @Override
//              public void postDeserialize(ReportPayload result, JsonElement src, Gson gson) {
//
//              }
//
//              @Override
//              public void postSerialize(JsonElement result, ReportPayload src, Gson gson) {
//                  Map<Class<? extends ReportPayload>, String> discriminatorValueByClass = new HashMap<>();
//                      discriminatorValueByClass.put(AllOfCloseShiftPayloadReport.class, "AllOfCloseShiftPayloadReport");
//                      discriminatorValueByClass.put(AllOfShortCloseShiftPayloadReport.class, "AllOfShortCloseShiftPayloadReport");
//                      discriminatorValueByClass.put(ReportPayload.class, "ReportPayload");
//                  if(result instanceof JsonObject)
//                  {
//                      if(!((JsonObject) result).has(""))
//                      {
//                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
//                      }
//                  }
//              }
//          })
//          .registerTypeSelector(GoodDetailsPayload.class, new TypeSelector<GoodDetailsPayload>() {
//            @Override
//            public Class<? extends GoodDetailsPayload> getClassForElement(JsonElement readElement) {
//                Map<String, Class<? extends GoodDetailsPayload>> classByDiscriminatorValue = new HashMap<>();
//                    classByDiscriminatorValue.put("AllOfGoodItemPayloadGood".toUpperCase(), AllOfGoodItemPayloadGood.class);
//                    classByDiscriminatorValue.put("AllOfOrderGoodItemModelGood".toUpperCase(), AllOfOrderGoodItemModelGood.class);
//                    classByDiscriminatorValue.put("GoodDetailsPayload".toUpperCase(), GoodDetailsPayload.class);
//                return getClassByDiscriminator(
//                            classByDiscriminatorValue,
//                            getDiscriminatorValue(readElement, ""));
//            }
//          })
//          .registerPostProcessor(GoodDetailsPayload.class, new PostProcessor<GoodDetailsPayload>() {
//              @Override
//              public void postDeserialize(GoodDetailsPayload result, JsonElement src, Gson gson) {
//
//              }
//
//              @Override
//              public void postSerialize(JsonElement result, GoodDetailsPayload src, Gson gson) {
//                  Map<Class<? extends GoodDetailsPayload>, String> discriminatorValueByClass = new HashMap<>();
//                      discriminatorValueByClass.put(AllOfGoodItemPayloadGood.class, "AllOfGoodItemPayloadGood");
//                      discriminatorValueByClass.put(AllOfOrderGoodItemModelGood.class, "AllOfOrderGoodItemModelGood");
//                      discriminatorValueByClass.put(GoodDetailsPayload.class, "GoodDetailsPayload");
//                  if(result instanceof JsonObject)
//                  {
//                      if(!((JsonObject) result).has(""))
//                      {
//                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
//                      }
//                  }
//              }
//          })
//          .registerTypeSelector(PaginationMeta.class, new TypeSelector<PaginationMeta>() {
//            @Override
//            public Class<? extends PaginationMeta> getClassForElement(JsonElement readElement) {
//                Map<String, Class<? extends PaginationMeta>> classByDiscriminatorValue = new HashMap<>();
//                    classByDiscriminatorValue.put("AllOfPaginatedResult_DetailedCashRegisterModel_Meta".toUpperCase(), AllOfPaginatedResultDetailedCashRegisterModelMeta.class);
//                    classByDiscriminatorValue.put("AllOfPaginatedResult_GoodModel_Meta".toUpperCase(), AllOfPaginatedResultGoodModelMeta.class);
//                    classByDiscriminatorValue.put("AllOfPaginatedResult_OrderModel_Meta".toUpperCase(), AllOfPaginatedResultOrderModelMeta.class);
//                    classByDiscriminatorValue.put("AllOfPaginatedResult_ReceiptModel_Meta".toUpperCase(), AllOfPaginatedResultReceiptModelMeta.class);
//                    classByDiscriminatorValue.put("AllOfPaginatedResult_ReportModel_Meta".toUpperCase(), AllOfPaginatedResultReportModelMeta.class);
//                    classByDiscriminatorValue.put("AllOfPaginatedResult_ShiftWithCashRegisterModel_Meta".toUpperCase(), AllOfPaginatedResultShiftWithCashRegisterModelMeta.class);
//                    classByDiscriminatorValue.put("AllOfPaginatedResult_ShortTransaction_Meta".toUpperCase(), AllOfPaginatedResultShortTransactionMeta.class);
//                    classByDiscriminatorValue.put("PaginationMeta".toUpperCase(), PaginationMeta.class);
//                return getClassByDiscriminator(
//                            classByDiscriminatorValue,
//                            getDiscriminatorValue(readElement, ""));
//            }
//          })
//          .registerPostProcessor(PaginationMeta.class, new PostProcessor<PaginationMeta>() {
//              @Override
//              public void postDeserialize(PaginationMeta result, JsonElement src, Gson gson) {
//
//              }
//
//              @Override
//              public void postSerialize(JsonElement result, PaginationMeta src, Gson gson) {
//                  Map<Class<? extends PaginationMeta>, String> discriminatorValueByClass = new HashMap<>();
//                      discriminatorValueByClass.put(AllOfPaginatedResultDetailedCashRegisterModelMeta.class, "AllOfPaginatedResult_DetailedCashRegisterModel_Meta");
//                      discriminatorValueByClass.put(AllOfPaginatedResultGoodModelMeta.class, "AllOfPaginatedResult_GoodModel_Meta");
//                      discriminatorValueByClass.put(AllOfPaginatedResultOrderModelMeta.class, "AllOfPaginatedResult_OrderModel_Meta");
//                      discriminatorValueByClass.put(AllOfPaginatedResultReceiptModelMeta.class, "AllOfPaginatedResult_ReceiptModel_Meta");
//                      discriminatorValueByClass.put(AllOfPaginatedResultReportModelMeta.class, "AllOfPaginatedResult_ReportModel_Meta");
//                      discriminatorValueByClass.put(AllOfPaginatedResultShiftWithCashRegisterModelMeta.class, "AllOfPaginatedResult_ShiftWithCashRegisterModel_Meta");
//                      discriminatorValueByClass.put(AllOfPaginatedResultShortTransactionMeta.class, "AllOfPaginatedResult_ShortTransaction_Meta");
//                      discriminatorValueByClass.put(PaginationMeta.class, "PaginationMeta");
//                  if(result instanceof JsonObject)
//                  {
//                      if(!((JsonObject) result).has(""))
//                      {
//                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
//                      }
//                  }
//              }
//          })
        ;
        return fireBuilder.createGsonBuilder();
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if(null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    private static <T> Class<? extends T> getClassByDiscriminator(Map<String, Class<? extends T>> classByDiscriminatorValue, String discriminatorValue) {
        Class<? extends T> clazz = classByDiscriminatorValue.get(discriminatorValue.toUpperCase());
        if(null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    public JSON() {
        gson = createGson()
            .registerTypeAdapter(Date.class, dateTypeAdapter)
            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
            .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
//            .registerTypeAdapter(java.time.OffsetDateTime.class, new JavaOffsetDateTime())
            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
            .registerTypeAdapter(AnyOfReceiptModelPaymentsItems.class, new PaymentsInstanceCreator())
            .create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     * @return JSON
     */
    public JSON setGson(Gson gson) {
        this.gson = gson;
        return this;
    }

    public JSON setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
        return this;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(String body, Type returnType) {
    	System.out.println(body);
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class))
                return (T) body;
            else throw (e);
        }
    }

    
    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public JSON setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {
        }

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {
        }

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public JSON setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
        return this;
    }
    
    
    public class PaymentsInstanceCreator implements com.google.gson.JsonDeserializer<AnyOfReceiptModelPaymentsItems> {

 		@Override
 		public AnyOfReceiptModelPaymentsItems deserialize(JsonElement jsonElement, Type arg1, JsonDeserializationContext arg2)
 				throws JsonParseException {

 			        JsonObject jsonObject = jsonElement.getAsJsonObject();
 			        JsonElement val = jsonObject.get("type");
 			        PaymentType p = PaymentType.valueOf(val.getAsString());
 			        switch (p) {
 			        case CASH:
 			        	return new CashPaymentPayload();
 			        case CASHLESS:
 			        	return new CardPaymentPayload();
 			        case CARD:
 			        	return new ObsoleteCardPaymentPayload();
					default:
						return null;
					}
 		}

 	}

}
