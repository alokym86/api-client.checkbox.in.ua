/*
 * test checkbox API
 * Core API of Software Registrar of Settlement Operations
 *
 * OpenAPI spec version: 0.1.26
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ua.checkbox.j8client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * OfflineCodesCountSchema
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-11-02T14:34:29.121+02:00[Europe/Kiev]")
public class OfflineCodesCountSchema {
  @SerializedName("available")
  private Integer available = 0;

  @SerializedName("default")
  private Integer _default = 0;

  @SerializedName("minimal")
  private Integer minimal = 0;

  @SerializedName("used")
  private Integer used = 0;

  public OfflineCodesCountSchema available(Integer available) {
    this.available = available;
    return this;
  }

   /**
   * Доступна кількість
   * @return available
  **/
  @Schema(description = "Доступна кількість")
  public Integer getAvailable() {
    return available;
  }

  public void setAvailable(Integer available) {
    this.available = available;
  }

  public OfflineCodesCountSchema _default(Integer _default) {
    this._default = _default;
    return this;
  }

   /**
   * Кількість кодів що запитується автоматично сервером CheckBox
   * @return _default
  **/
  @Schema(description = "Кількість кодів що запитується автоматично сервером CheckBox")
  public Integer getDefault() {
    return _default;
  }

  public void setDefault(Integer _default) {
    this._default = _default;
  }

  public OfflineCodesCountSchema minimal(Integer minimal) {
    this.minimal = minimal;
    return this;
  }

   /**
   * Мінімальна кількість кодів при досягненні якої виконується отримання нових кодів
   * @return minimal
  **/
  @Schema(description = "Мінімальна кількість кодів при досягненні якої виконується отримання нових кодів")
  public Integer getMinimal() {
    return minimal;
  }

  public void setMinimal(Integer minimal) {
    this.minimal = minimal;
  }

  public OfflineCodesCountSchema used(Integer used) {
    this.used = used;
    return this;
  }

   /**
   * Кількість кодів, що відмічені використаними. Лічильник зкидається при отриманні нових кодів.
   * @return used
  **/
  @Schema(description = "Кількість кодів, що відмічені використаними. Лічильник зкидається при отриманні нових кодів.")
  public Integer getUsed() {
    return used;
  }

  public void setUsed(Integer used) {
    this.used = used;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfflineCodesCountSchema offlineCodesCountSchema = (OfflineCodesCountSchema) o;
    return Objects.equals(this.available, offlineCodesCountSchema.available) &&
        Objects.equals(this._default, offlineCodesCountSchema._default) &&
        Objects.equals(this.minimal, offlineCodesCountSchema.minimal) &&
        Objects.equals(this.used, offlineCodesCountSchema.used);
  }

  @Override
  public int hashCode() {
    return Objects.hash(available, _default, minimal, used);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfflineCodesCountSchema {\n");
    
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    minimal: ").append(toIndentedString(minimal)).append("\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
