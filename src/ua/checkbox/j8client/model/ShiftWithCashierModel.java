/*
 * test checkbox API
 * Core API of Software Registrar of Settlement Operations
 *
 * OpenAPI spec version: 0.1.26
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ua.checkbox.j8client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;
// import org.threeten.bp.OffsetDateTime;
/**
 * ShiftWithCashierModel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-11-02T14:34:29.121+02:00[Europe/Kiev]")
public class ShiftWithCashierModel extends ShiftModel{
 
  @SerializedName("cashier")
  protected CashierModel cashier = null;
  @Override
  public ShiftWithCashierModel id(UUID id) {
    this.id = id;
    return this;
  }
  @Override
  public ShiftWithCashierModel serial(Integer serial) {
    this.serial = serial;
    return this;
  }
  @Override
  public ShiftWithCashierModel status(ShiftStatus status) {
    this.status = status;
    return this;
  }
  @Override
  public ShiftWithCashierModel zReport(ReportModel zReport) {
    this.zReport = zReport;
    return this;
  }
  @Override
  public ShiftWithCashierModel openedAt(OffsetDateTime openedAt) {
    this.openedAt = openedAt;
    return this;
  }
  @Override
  public ShiftWithCashierModel closedAt(OffsetDateTime closedAt) {
    this.closedAt = closedAt;
    return this;
  }
  @Override
  public ShiftWithCashierModel initialTransaction(ShortTransaction initialTransaction) {
    this.initialTransaction = initialTransaction;
    return this;
  }
  @Override
  public ShiftWithCashierModel closingTransaction(ShortTransaction closingTransaction) {
    this.closingTransaction = closingTransaction;
    return this;
  }
  @Override
  public ShiftWithCashierModel createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }
  @Override
  public ShiftWithCashierModel updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }
  @Override
  public ShiftWithCashierModel balance(BalanceModel balance) {
    this.balance = balance;
    return this;
  }
  @Override
  public ShiftWithCashierModel taxes(List<ShiftTaxModel> taxes) {
    this.taxes = taxes;
    return this;
  }
  @Override
  public ShiftWithCashierModel addTaxesItem(ShiftTaxModel taxesItem) {
    this.taxes.add(taxesItem);
    return this;
  }

  public ShiftWithCashierModel cashier(CashierModel cashier) {
    this.cashier = cashier;
    return this;
  }

   /**
   * Get cashier
   * @return cashier
  **/
  @Schema(required = true, description = "")
  public CashierModel getCashier() {
    return cashier;
  }

  public void setCashier(CashierModel cashier) {
    this.cashier = cashier;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShiftWithCashierModel shiftWithCashierModel = (ShiftWithCashierModel) o;
    return Objects.equals(this.id, shiftWithCashierModel.id) &&
        Objects.equals(this.serial, shiftWithCashierModel.serial) &&
        Objects.equals(this.status, shiftWithCashierModel.status) &&
        Objects.equals(this.zReport, shiftWithCashierModel.zReport) &&
        Objects.equals(this.openedAt, shiftWithCashierModel.openedAt) &&
        Objects.equals(this.closedAt, shiftWithCashierModel.closedAt) &&
        Objects.equals(this.initialTransaction, shiftWithCashierModel.initialTransaction) &&
        Objects.equals(this.closingTransaction, shiftWithCashierModel.closingTransaction) &&
        Objects.equals(this.createdAt, shiftWithCashierModel.createdAt) &&
        Objects.equals(this.updatedAt, shiftWithCashierModel.updatedAt) &&
        Objects.equals(this.balance, shiftWithCashierModel.balance) &&
        Objects.equals(this.taxes, shiftWithCashierModel.taxes) &&
        Objects.equals(this.cashier, shiftWithCashierModel.cashier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, serial, status, zReport, openedAt, closedAt, initialTransaction, closingTransaction, createdAt, updatedAt, balance, taxes, cashier);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShiftWithCashierModel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    zReport: ").append(toIndentedString(zReport)).append("\n");
    sb.append("    openedAt: ").append(toIndentedString(openedAt)).append("\n");
    sb.append("    closedAt: ").append(toIndentedString(closedAt)).append("\n");
    sb.append("    initialTransaction: ").append(toIndentedString(initialTransaction)).append("\n");
    sb.append("    closingTransaction: ").append(toIndentedString(closingTransaction)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    cashier: ").append(toIndentedString(cashier)).append("\n");
    sb.append("}");
    return sb.toString();
  }
}
