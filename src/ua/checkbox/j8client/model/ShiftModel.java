/*
 * test checkbox API
 * Core API of Software Registrar of Settlement Operations
 *
 * OpenAPI spec version: 0.1.26
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ua.checkbox.j8client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
// import org.threeten.bp.OffsetDateTime;
/**
 * ShiftModel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-11-02T14:34:29.121+02:00[Europe/Kiev]")
public class ShiftModel {
  @SerializedName("id")
  protected UUID id = null;

  @SerializedName("serial")
  protected Integer serial = null;

  @SerializedName("status")
  protected ShiftStatus status = null;

  @SerializedName("z_report")
  protected ReportModel zReport = null;

  @SerializedName("opened_at")
  protected OffsetDateTime openedAt = null;

  @SerializedName("closed_at")
  protected OffsetDateTime closedAt = null;

  @SerializedName("initial_transaction")
  protected ShortTransaction initialTransaction = null;

  @SerializedName("closing_transaction")
  protected ShortTransaction closingTransaction = null;

  @SerializedName("created_at")
  protected OffsetDateTime createdAt = null;

  @SerializedName("updated_at")
  protected OffsetDateTime updatedAt = null;

  @SerializedName("balance")
  protected BalanceModel balance = null;

  @SerializedName("taxes")
  protected List<ShiftTaxModel> taxes = new ArrayList<ShiftTaxModel>();

  public ShiftModel id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(required = true, description = "")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public ShiftModel serial(Integer serial) {
    this.serial = serial;
    return this;
  }

   /**
   * Get serial
   * @return serial
  **/
  @Schema(required = true, description = "")
  public Integer getSerial() {
    return serial;
  }

  public void setSerial(Integer serial) {
    this.serial = serial;
  }

  public ShiftModel status(ShiftStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(required = true, description = "")
  public ShiftStatus getStatus() {
    return status;
  }

  public void setStatus(ShiftStatus status) {
    this.status = status;
  }

  public ShiftModel zReport(ReportModel zReport) {
    this.zReport = zReport;
    return this;
  }

   /**
   * Get zReport
   * @return zReport
  **/
  @Schema(description = "")
  public ReportModel getZReport() {
    return zReport;
  }

  public void setZReport(ReportModel zReport) {
    this.zReport = zReport;
  }

  public ShiftModel openedAt(OffsetDateTime openedAt) {
    this.openedAt = openedAt;
    return this;
  }

   /**
   * Get openedAt
   * @return openedAt
  **/
  @Schema(description = "")
  public OffsetDateTime getOpenedAt() {
    return openedAt;
  }

  public void setOpenedAt(OffsetDateTime openedAt) {
    this.openedAt = openedAt;
  }

  public ShiftModel closedAt(OffsetDateTime closedAt) {
    this.closedAt = closedAt;
    return this;
  }

   /**
   * Get closedAt
   * @return closedAt
  **/
  @Schema(description = "")
  public OffsetDateTime getClosedAt() {
    return closedAt;
  }

  public void setClosedAt(OffsetDateTime closedAt) {
    this.closedAt = closedAt;
  }

  public ShiftModel initialTransaction(ShortTransaction initialTransaction) {
    this.initialTransaction = initialTransaction;
    return this;
  }

   /**
   * Get initialTransaction
   * @return initialTransaction
  **/
  @Schema(description = "")
  public ShortTransaction getInitialTransaction() {
    return initialTransaction;
  }

  public void setInitialTransaction(ShortTransaction initialTransaction) {
    this.initialTransaction = initialTransaction;
  }

  public ShiftModel closingTransaction(ShortTransaction closingTransaction) {
    this.closingTransaction = closingTransaction;
    return this;
  }

   /**
   * Get closingTransaction
   * @return closingTransaction
  **/
  @Schema(description = "")
  public ShortTransaction getClosingTransaction() {
    return closingTransaction;
  }

  public void setClosingTransaction(ShortTransaction closingTransaction) {
    this.closingTransaction = closingTransaction;
  }

  public ShiftModel createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public ShiftModel updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public ShiftModel balance(BalanceModel balance) {
    this.balance = balance;
    return this;
  }

   /**
   * Get balance
   * @return balance
  **/
  @Schema(description = "")
  public BalanceModel getBalance() {
    return balance;
  }

  public void setBalance(BalanceModel balance) {
    this.balance = balance;
  }

  public ShiftModel taxes(List<ShiftTaxModel> taxes) {
    this.taxes = taxes;
    return this;
  }

  public ShiftModel addTaxesItem(ShiftTaxModel taxesItem) {
    this.taxes.add(taxesItem);
    return this;
  }

   /**
   * Get taxes
   * @return taxes
  **/
  @Schema(required = true, description = "")
  public List<ShiftTaxModel> getTaxes() {
    return taxes;
  }

  public void setTaxes(List<ShiftTaxModel> taxes) {
    this.taxes = taxes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShiftModel shiftModel = (ShiftModel) o;
    return Objects.equals(this.id, shiftModel.id) &&
        Objects.equals(this.serial, shiftModel.serial) &&
        Objects.equals(this.status, shiftModel.status) &&
        Objects.equals(this.zReport, shiftModel.zReport) &&
        Objects.equals(this.openedAt, shiftModel.openedAt) &&
        Objects.equals(this.closedAt, shiftModel.closedAt) &&
        Objects.equals(this.initialTransaction, shiftModel.initialTransaction) &&
        Objects.equals(this.closingTransaction, shiftModel.closingTransaction) &&
        Objects.equals(this.createdAt, shiftModel.createdAt) &&
        Objects.equals(this.updatedAt, shiftModel.updatedAt) &&
        Objects.equals(this.balance, shiftModel.balance) &&
        Objects.equals(this.taxes, shiftModel.taxes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, serial, status, zReport, openedAt, closedAt, initialTransaction, closingTransaction, createdAt, updatedAt, balance, taxes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShiftModel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    zReport: ").append(toIndentedString(zReport)).append("\n");
    sb.append("    openedAt: ").append(toIndentedString(openedAt)).append("\n");
    sb.append("    closedAt: ").append(toIndentedString(closedAt)).append("\n");
    sb.append("    initialTransaction: ").append(toIndentedString(initialTransaction)).append("\n");
    sb.append("    closingTransaction: ").append(toIndentedString(closingTransaction)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  protected String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
