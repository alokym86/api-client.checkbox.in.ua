/*
 * test checkbox API
 * Core API of Software Registrar of Settlement Operations
 *
 * OpenAPI spec version: 0.1.26
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ua.checkbox.j8client.api;

import com.google.gson.reflect.TypeToken;

import ua.checkbox.j8client.ApiCallback;
import ua.checkbox.j8client.ApiClient;
import ua.checkbox.j8client.ApiException;
import ua.checkbox.j8client.ApiResponse;
import ua.checkbox.j8client.Configuration;
import ua.checkbox.j8client.Pair;
import ua.checkbox.j8client.ProgressRequestBody;
import ua.checkbox.j8client.ProgressResponseBody;
import ua.checkbox.j8client.model.CalculatedReceiptSellPayload;
import ua.checkbox.j8client.model.CashRegisterDeviceModel;
import ua.checkbox.j8client.model.CashRegisterOfflineTime;
import ua.checkbox.j8client.model.CashierAccessTokenResponseModel;
import ua.checkbox.j8client.model.CashierSignIn;
import ua.checkbox.j8client.model.CashierSignInPinCode;
import ua.checkbox.j8client.model.CashierSignInSignature;
import ua.checkbox.j8client.model.CashierSignatureStatus;
import ua.checkbox.j8client.model.CloseShiftPayload;
import ua.checkbox.j8client.model.CreateShiftPayload;
import ua.checkbox.j8client.model.CurrencyExchangePayload;
import ua.checkbox.j8client.model.DeleteWebhookSchema;
import ua.checkbox.j8client.model.DetailedCashRegisterModel;
import ua.checkbox.j8client.model.DetailedCashierModel;
import ua.checkbox.j8client.model.GoOfflinePayload;
import ua.checkbox.j8client.model.OfflineCodesCountSchema;
import ua.checkbox.j8client.model.OfflineReceiptSellPayload;
import ua.checkbox.j8client.model.OrderModel;
import ua.checkbox.j8client.model.OrderStatus;
import ua.checkbox.j8client.model.OrdersModel;
import ua.checkbox.j8client.model.PaginatedResultDetailedCashRegisterModel_;
import ua.checkbox.j8client.model.PaginatedResultOrderModel_;
import ua.checkbox.j8client.model.PaginatedResultReceiptModel_;
import ua.checkbox.j8client.model.PaginatedResultReportModel_;
import ua.checkbox.j8client.model.PaginatedResultShiftWithCashRegisterModel_;
import ua.checkbox.j8client.model.PaginatedResultShortTransaction_;
import ua.checkbox.j8client.model.ReceiptModel;
import ua.checkbox.j8client.model.ReceiptSellPayload;
import ua.checkbox.j8client.model.ReceiptServicePayload;
import ua.checkbox.j8client.model.ReportModel;
import ua.checkbox.j8client.model.ReportPayload;
import ua.checkbox.j8client.model.ResponseAddOrdersApiV1OrdersPost;
import ua.checkbox.j8client.model.ServiceCurrencyPayload;
import ua.checkbox.j8client.model.SetWebhookPayload;
import ua.checkbox.j8client.model.ShiftStatus;
import ua.checkbox.j8client.model.ShiftWithCashRegisterModel;
import ua.checkbox.j8client.model.ShiftWithCashierAndCashRegister;
import ua.checkbox.j8client.model.ShortCloseShiftPayload;
import ua.checkbox.j8client.model.TaxModel;
import ua.checkbox.j8client.model.TransactionModel;
import ua.checkbox.j8client.model.TransactionStatus;
import ua.checkbox.j8client.model.TransactionType;
import ua.checkbox.j8client.model.UpdateTransactionPayload;
import ua.checkbox.j8client.model.WebhookInfoResponseSchema;
import ua.checkbox.j8client.model.WebhookInfoSchema;

import java.io.File;
import java.io.IOException;
import java.util.UUID;
import java.lang.reflect.Type;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;
 
	private String xClientName = null;
    private String xClientVersion = null;
    
    public DefaultApi(String path) {
        this(Configuration.getDefaultApiClient(), path);
    }

    public DefaultApi(ApiClient apiClient, String path) {
        this.apiClient = apiClient;
        this.apiClient.setBasePath(path);
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public boolean isAutorized() {
    	if (apiClient != null && apiClient.isAutorized())
    		return true;
		return false;
	}

	public String getxClientName() {
 		return xClientName;
 	}
	
	/**
	 * xClientName will added to each next request
	 * @param xClientName Наза клієнту або сервісу що інтегрується з API, наприклад 'My Custom SDK'
	 */
 	public void setxClientName(String xClientName) {
 		this.xClientName = xClientName;
 	}

 	public String getxClientVersion() {
 		return xClientVersion;
 	}
 	
	/**
	 * xClientVersion will added to each next request
	 * @param xClientVersion Номер версії клінту що інтегрується з API, наприклад 'v1.2.5'
	 */
 	public void setxClientVersion(String xClientVersion) {
 		this.xClientVersion = xClientVersion;
 	}

 	
    /**
     * Build call for addExternalReceipt
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addExternalReceiptCall(CalculatedReceiptSellPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/receipts/add-external";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call addExternalReceiptValidateBeforeCall(CalculatedReceiptSellPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addExternalReceipt(Async)");
        }
        
        com.squareup.okhttp.Call call = addExternalReceiptCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add External Receipt
     * Додавання чеку, створеного в зовнішній системі в офлайн режимі, на основі повної інформації про чек. Зовнішня система бере на себе всі розрахунки (знижки, сума, податки...). Транзакційний процесінг зберігає та відправляє чек до ДПС без аналізу та обробки.
     * @param body  (required)
     * @return ReceiptModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReceiptModel addExternalReceipt(CalculatedReceiptSellPayload body) throws ApiException {
        ApiResponse<ReceiptModel> resp = addExternalReceiptWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Add External Receipt
     * Додавання чеку, створеного в зовнішній системі в офлайн режимі, на основі повної інформації про чек. Зовнішня система бере на себе всі розрахунки (знижки, сума, податки...). Транзакційний процесінг зберігає та відправляє чек до ДПС без аналізу та обробки.
     * @param body  (required)
     * @return ApiResponse&lt;ReceiptModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReceiptModel> addExternalReceiptWithHttpInfo(CalculatedReceiptSellPayload body) throws ApiException {
        com.squareup.okhttp.Call call = addExternalReceiptValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ReceiptModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add External Receipt (asynchronously)
     * Додавання чеку, створеного в зовнішній системі в офлайн режимі, на основі повної інформації про чек. Зовнішня система бере на себе всі розрахунки (знижки, сума, податки...). Транзакційний процесінг зберігає та відправляє чек до ДПС без аналізу та обробки.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addExternalReceiptAsync(CalculatedReceiptSellPayload body, final ApiCallback<ReceiptModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addExternalReceiptValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReceiptModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addExternalReport
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addExternalReportCall(ReportPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/reports/add-external";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call addExternalReportValidateBeforeCall(ReportPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addExternalReport(Async)");
        }
        
        com.squareup.okhttp.Call call = addExternalReportCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add External Report
     * Додавання звіту з зовнішньої системи
     * @param body  (required)
     * @return ReportModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportModel addExternalReport(ReportPayload body) throws ApiException {
        ApiResponse<ReportModel> resp = addExternalReportWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Add External Report
     * Додавання звіту з зовнішньої системи
     * @param body  (required)
     * @return ApiResponse&lt;ReportModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportModel> addExternalReportWithHttpInfo(ReportPayload body) throws ApiException {
        com.squareup.okhttp.Call call = addExternalReportValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ReportModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add External Report (asynchronously)
     * Додавання звіту з зовнішньої системи
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addExternalReportAsync(ReportPayload body, final ApiCallback<ReportModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addExternalReportValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addOrdersApiV1OrdersPost
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrdersApiV1OrdersPostCall(OrdersModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call addOrdersApiV1OrdersPostValidateBeforeCall(OrdersModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOrdersApiV1OrdersPost(Async)");
        }
        
        com.squareup.okhttp.Call call = addOrdersApiV1OrdersPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Orders
     * Використовуйте цей метод щоб додати замовлення, повертає список **тільки доданих** замовлень, замовлення що вже зареєстровані в системі будуть проігноровані  &#x60;order_id&#x60; - Ім&#x27;я замовлення, яке відображається в додатку
     * @param body  (required)
     * @return ResponseAddOrdersApiV1OrdersPost
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseAddOrdersApiV1OrdersPost addOrdersApiV1OrdersPost(OrdersModel body) throws ApiException {
        ApiResponse<ResponseAddOrdersApiV1OrdersPost> resp = addOrdersApiV1OrdersPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Add Orders
     * Використовуйте цей метод щоб додати замовлення, повертає список **тільки доданих** замовлень, замовлення що вже зареєстровані в системі будуть проігноровані  &#x60;order_id&#x60; - Ім&#x27;я замовлення, яке відображається в додатку
     * @param body  (required)
     * @return ApiResponse&lt;ResponseAddOrdersApiV1OrdersPost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseAddOrdersApiV1OrdersPost> addOrdersApiV1OrdersPostWithHttpInfo(OrdersModel body) throws ApiException {
        com.squareup.okhttp.Call call = addOrdersApiV1OrdersPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ResponseAddOrdersApiV1OrdersPost>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Orders (asynchronously)
     * Використовуйте цей метод щоб додати замовлення, повертає список **тільки доданих** замовлень, замовлення що вже зареєстровані в системі будуть проігноровані  &#x60;order_id&#x60; - Ім&#x27;я замовлення, яке відображається в додатку
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrdersApiV1OrdersPostAsync(OrdersModel body, final ApiCallback<ResponseAddOrdersApiV1OrdersPost> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrdersApiV1OrdersPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseAddOrdersApiV1OrdersPost>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for askOfflineCodes
     * @param xLicenseKey  (required)
     * @param count Number of codes to get (optional, default to 150)
     * @param sync  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call askOfflineCodesCall(String xLicenseKey, Integer count, Boolean sync, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/cash-registers/ask-offline-codes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (sync != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sync", sync));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));
        if (xLicenseKey != null)
        localVarHeaderParams.put("X-License-Key", apiClient.parameterToString(xLicenseKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call askOfflineCodesValidateBeforeCall(String xLicenseKey, Integer count, Boolean sync, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xLicenseKey' is set
        if (xLicenseKey == null) {
            throw new ApiException("Missing the required parameter 'xLicenseKey' when calling askOfflineCodes(Async)");
        }
        
        com.squareup.okhttp.Call call = askOfflineCodesCall(xLicenseKey, count, sync, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Ask Offline Codes
     * Асинхронний або синхронний (керується параметром sync - значення False (default) або True) запит на оновлення списку фіскальних номерів для офлайн режиму для вказаного касового реєстратора. Ключ ліцензії реєстратора передається в заголовку X-License-Key. В результаті виклику ініціюється запит за номерами до серверу ДПС. Отримані номери зберігаються в базі транзакційного процесингу, і стають доступними для отримання методом get-offline-codes. Важливо - номер перестає повертатися сервером ДПС (вважається \&quot;використаним\&quot;) лише після відправки до ДПС чеку з цим номером. До того ДПС повертає цей номер при кожному виклику. Наприклад, зробивши до ДПС перший запит на 100 номерів, отримаємо 100 нових вільних фіскальних номерів для відповідного реєстратора. Але зробивши після цього запит ще на 200 номерів, отримаємо 100 тих самих номерів та ще 100 наступних за ними. Виклик можна робити лише тоді, коли касовий реєстратор знаходиться в онлайн режимі.
     * @param xLicenseKey  (required)
     * @param count Number of codes to get (optional, default to 150)
     * @param sync  (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void askOfflineCodes(String xLicenseKey, Integer count, Boolean sync) throws ApiException {
        askOfflineCodesWithHttpInfo(xLicenseKey, count, sync);
    }

    /**
     * Ask Offline Codes
     * Асинхронний або синхронний (керується параметром sync - значення False (default) або True) запит на оновлення списку фіскальних номерів для офлайн режиму для вказаного касового реєстратора. Ключ ліцензії реєстратора передається в заголовку X-License-Key. В результаті виклику ініціюється запит за номерами до серверу ДПС. Отримані номери зберігаються в базі транзакційного процесингу, і стають доступними для отримання методом get-offline-codes. Важливо - номер перестає повертатися сервером ДПС (вважається \&quot;використаним\&quot;) лише після відправки до ДПС чеку з цим номером. До того ДПС повертає цей номер при кожному виклику. Наприклад, зробивши до ДПС перший запит на 100 номерів, отримаємо 100 нових вільних фіскальних номерів для відповідного реєстратора. Але зробивши після цього запит ще на 200 номерів, отримаємо 100 тих самих номерів та ще 100 наступних за ними. Виклик можна робити лише тоді, коли касовий реєстратор знаходиться в онлайн режимі.
     * @param xLicenseKey  (required)
     * @param count Number of codes to get (optional, default to 150)
     * @param sync  (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> askOfflineCodesWithHttpInfo(String xLicenseKey, Integer count, Boolean sync) throws ApiException {
        com.squareup.okhttp.Call call = askOfflineCodesValidateBeforeCall(xLicenseKey, count, sync, null, null);
        return apiClient.execute(call);
    }

    /**
     * Ask Offline Codes (asynchronously)
     * Асинхронний або синхронний (керується параметром sync - значення False (default) або True) запит на оновлення списку фіскальних номерів для офлайн режиму для вказаного касового реєстратора. Ключ ліцензії реєстратора передається в заголовку X-License-Key. В результаті виклику ініціюється запит за номерами до серверу ДПС. Отримані номери зберігаються в базі транзакційного процесингу, і стають доступними для отримання методом get-offline-codes. Важливо - номер перестає повертатися сервером ДПС (вважається \&quot;використаним\&quot;) лише після відправки до ДПС чеку з цим номером. До того ДПС повертає цей номер при кожному виклику. Наприклад, зробивши до ДПС перший запит на 100 номерів, отримаємо 100 нових вільних фіскальних номерів для відповідного реєстратора. Але зробивши після цього запит ще на 200 номерів, отримаємо 100 тих самих номерів та ще 100 наступних за ними. Виклик можна робити лише тоді, коли касовий реєстратор знаходиться в онлайн режимі.
     * @param xLicenseKey  (required)
     * @param count Number of codes to get (optional, default to 150)
     * @param sync  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call askOfflineCodesAsync(String xLicenseKey, Integer count, Boolean sync, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = askOfflineCodesValidateBeforeCall(xLicenseKey, count, sync, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for cancelOrderApiV1OrdersOrderIdPatch
     * @param orderId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelOrderApiV1OrdersOrderIdPatchCall(UUID orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/orders/{order_id}"
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call cancelOrderApiV1OrdersOrderIdPatchValidateBeforeCall(UUID orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling cancelOrderApiV1OrdersOrderIdPatch(Async)");
        }
        
        com.squareup.okhttp.Call call = cancelOrderApiV1OrdersOrderIdPatchCall(orderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel Order
     * Використовуйте цей метод, щоб перевести статус замовлення з **PENDING** в **CANCELLED**
     * @param orderId  (required)
     * @return OrderModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderModel cancelOrderApiV1OrdersOrderIdPatch(UUID orderId) throws ApiException {
        ApiResponse<OrderModel> resp = cancelOrderApiV1OrdersOrderIdPatchWithHttpInfo(orderId);
        return resp.getData();
    }

    /**
     * Cancel Order
     * Використовуйте цей метод, щоб перевести статус замовлення з **PENDING** в **CANCELLED**
     * @param orderId  (required)
     * @return ApiResponse&lt;OrderModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderModel> cancelOrderApiV1OrdersOrderIdPatchWithHttpInfo(UUID orderId) throws ApiException {
        com.squareup.okhttp.Call call = cancelOrderApiV1OrdersOrderIdPatchValidateBeforeCall(orderId, null, null);
        Type localVarReturnType = new TypeToken<OrderModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel Order (asynchronously)
     * Використовуйте цей метод, щоб перевести статус замовлення з **PENDING** в **CANCELLED**
     * @param orderId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelOrderApiV1OrdersOrderIdPatchAsync(UUID orderId, final ApiCallback<OrderModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelOrderApiV1OrdersOrderIdPatchValidateBeforeCall(orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for checkSignature
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkSignatureCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/cashier/check-signature";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call checkSignatureValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = checkSignatureCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Check Signature
     * 
     * @return CashierSignatureStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CashierSignatureStatus checkSignature() throws ApiException {
        ApiResponse<CashierSignatureStatus> resp = checkSignatureWithHttpInfo();
        return resp.getData();
    }

    /**
     * Check Signature
     * 
     * @return ApiResponse&lt;CashierSignatureStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CashierSignatureStatus> checkSignatureWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = checkSignatureValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CashierSignatureStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check Signature (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkSignatureAsync(final ApiCallback<CashierSignatureStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkSignatureValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CashierSignatureStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for closeShift
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call closeShiftCall(CloseShiftPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/shifts/close";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call closeShift(CloseShiftPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = closeShiftCall(body, progressListener, progressRequestListener);
        return call;
        
    }

    /**
     * Close Shift
     * Створення Z-Звіту та закриття поточної зміни користувачем (касиром).  Стан зміни встановлюється як \&quot;CLOSING\&quot; та створюється транзакція закриття зміни (поле \&quot;closing_transaction\&quot;).  Для переведення зміни в статус CLOSED необхідно щоб транзакція була підписана за допомогою КЕП та доставлена в ДПС.  Статус зміни можна відслідковувати за допомогою GET запиту по шляху /api/v1/shifts/{shift_id}, де {shift_id} - ідентифікатор зміни.  Після закриття зміни в її рамках більше не можливо буде виконувати дії. Для продовження роботи потрібно створити нову зміну.  Опціонально Z-Звіт може бути сформований на стороні клієнта та переданий в тілі цього запиту  &lt;b&gt;Увага!&lt;/b&gt; При формуванні звіту на стороні клієнту перевірка коректності розрахунку оборотів та сум продажу не виконується!
     * @param body  (optional)
     * @return ShiftWithCashierAndCashRegister
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShiftWithCashierAndCashRegister closeShift(CloseShiftPayload body) throws ApiException {
        ApiResponse<ShiftWithCashierAndCashRegister> resp = closeShiftWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Close Shift
     * Створення Z-Звіту та закриття поточної зміни користувачем (касиром).  Стан зміни встановлюється як \&quot;CLOSING\&quot; та створюється транзакція закриття зміни (поле \&quot;closing_transaction\&quot;).  Для переведення зміни в статус CLOSED необхідно щоб транзакція була підписана за допомогою КЕП та доставлена в ДПС.  Статус зміни можна відслідковувати за допомогою GET запиту по шляху /api/v1/shifts/{shift_id}, де {shift_id} - ідентифікатор зміни.  Після закриття зміни в її рамках більше не можливо буде виконувати дії. Для продовження роботи потрібно створити нову зміну.  Опціонально Z-Звіт може бути сформований на стороні клієнта та переданий в тілі цього запиту  &lt;b&gt;Увага!&lt;/b&gt; При формуванні звіту на стороні клієнту перевірка коректності розрахунку оборотів та сум продажу не виконується!
     * @param body  (optional)
     * @return ApiResponse&lt;ShiftWithCashierAndCashRegister&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShiftWithCashierAndCashRegister> closeShiftWithHttpInfo(CloseShiftPayload body) throws ApiException {
        com.squareup.okhttp.Call call = closeShift(body, null, null);
        Type localVarReturnType = new TypeToken<ShiftWithCashierAndCashRegister>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Close Shift (asynchronously)
     * Створення Z-Звіту та закриття поточної зміни користувачем (касиром).  Стан зміни встановлюється як \&quot;CLOSING\&quot; та створюється транзакція закриття зміни (поле \&quot;closing_transaction\&quot;).  Для переведення зміни в статус CLOSED необхідно щоб транзакція була підписана за допомогою КЕП та доставлена в ДПС.  Статус зміни можна відслідковувати за допомогою GET запиту по шляху /api/v1/shifts/{shift_id}, де {shift_id} - ідентифікатор зміни.  Після закриття зміни в її рамках більше не можливо буде виконувати дії. Для продовження роботи потрібно створити нову зміну.  Опціонально Z-Звіт може бути сформований на стороні клієнта та переданий в тілі цього запиту  &lt;b&gt;Увага!&lt;/b&gt; При формуванні звіту на стороні клієнту перевірка коректності розрахунку оборотів та сум продажу не виконується!
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call closeShiftAsync(CloseShiftPayload body, final ApiCallback<ShiftWithCashierAndCashRegister> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = closeShift(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ShiftWithCashierAndCashRegister>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for closeShiftBySeniorCashier
     * @param xLicenseKey  (required)
     * @param shiftId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call closeShiftBySeniorCashierCall(String xLicenseKey, UUID shiftId, ShortCloseShiftPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/shifts/{shift_id}/close"
            .replaceAll("\\{" + "shift_id" + "\\}", apiClient.escapeString(shiftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));
        if (xLicenseKey != null)
        localVarHeaderParams.put("X-License-Key", apiClient.parameterToString(xLicenseKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call closeShiftBySeniorCashierValidateBeforeCall(String xLicenseKey, UUID shiftId, ShortCloseShiftPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xLicenseKey' is set
        if (xLicenseKey == null) {
            throw new ApiException("Missing the required parameter 'xLicenseKey' when calling closeShiftBySeniorCashier(Async)");
        }
        // verify the required parameter 'shiftId' is set
        if (shiftId == null) {
            throw new ApiException("Missing the required parameter 'shiftId' when calling closeShiftBySeniorCashier(Async)");
        }
        
        com.squareup.okhttp.Call call = closeShiftBySeniorCashierCall(xLicenseKey, shiftId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Close Shift By Senior Cashier
     * Закриття зміни старшим касиром
     * @param xLicenseKey  (required)
     * @param shiftId  (required)
     * @param body  (optional)
     * @return ShiftWithCashierAndCashRegister
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShiftWithCashierAndCashRegister closeShiftBySeniorCashier(String xLicenseKey, UUID shiftId, ShortCloseShiftPayload body) throws ApiException {
        ApiResponse<ShiftWithCashierAndCashRegister> resp = closeShiftBySeniorCashierWithHttpInfo(xLicenseKey, shiftId, body);
        return resp.getData();
    }

    /**
     * Close Shift By Senior Cashier
     * Закриття зміни старшим касиром
     * @param xLicenseKey  (required)
     * @param shiftId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ShiftWithCashierAndCashRegister&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShiftWithCashierAndCashRegister> closeShiftBySeniorCashierWithHttpInfo(String xLicenseKey, UUID shiftId, ShortCloseShiftPayload body) throws ApiException {
        com.squareup.okhttp.Call call = closeShiftBySeniorCashierValidateBeforeCall(xLicenseKey, shiftId, body, null, null);
        Type localVarReturnType = new TypeToken<ShiftWithCashierAndCashRegister>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Close Shift By Senior Cashier (asynchronously)
     * Закриття зміни старшим касиром
     * @param xLicenseKey  (required)
     * @param shiftId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call closeShiftBySeniorCashierAsync(String xLicenseKey, UUID shiftId, ShortCloseShiftPayload body, final ApiCallback<ShiftWithCashierAndCashRegister> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = closeShiftBySeniorCashierValidateBeforeCall(xLicenseKey, shiftId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ShiftWithCashierAndCashRegister>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createOfflineReceipt
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOfflineReceiptCall(OfflineReceiptSellPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/receipts/sell-offline";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call createOfflineReceiptValidateBeforeCall(OfflineReceiptSellPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createOfflineReceipt(Async)");
        }
        
        com.squareup.okhttp.Call call = createOfflineReceiptCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Offline Receipt
     * Додавання чеку, створеного в зовнішній системі в офлайн режимі, в базу ТП для подальшої відправки в ДПС.
     * @param body  (required)
     * @return ReceiptModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReceiptModel createOfflineReceipt(OfflineReceiptSellPayload body) throws ApiException {
        ApiResponse<ReceiptModel> resp = createOfflineReceiptWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create Offline Receipt
     * Додавання чеку, створеного в зовнішній системі в офлайн режимі, в базу ТП для подальшої відправки в ДПС.
     * @param body  (required)
     * @return ApiResponse&lt;ReceiptModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReceiptModel> createOfflineReceiptWithHttpInfo(OfflineReceiptSellPayload body) throws ApiException {
        com.squareup.okhttp.Call call = createOfflineReceiptValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ReceiptModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Offline Receipt (asynchronously)
     * Додавання чеку, створеного в зовнішній системі в офлайн режимі, в базу ТП для подальшої відправки в ДПС.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOfflineReceiptAsync(OfflineReceiptSellPayload body, final ApiCallback<ReceiptModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOfflineReceiptValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReceiptModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createReceipt
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createReceiptCall(ReceiptSellPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/receipts/sell";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call createReceiptSell(ReceiptSellPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createReceipt(Async)");
        }
        
        com.squareup.okhttp.Call call = createReceiptCall(body, progressListener, progressRequestListener);
        return call;
        
    }

    /**
     * Create Receipt
     * Створення чеку продажу/повернення, його фіскалізація та доставка клієнту по email.
     * @param body  (required)
     * @return ReceiptModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReceiptModel createReceiptSell(ReceiptSellPayload body) throws ApiException {
        ApiResponse<ReceiptModel> resp = createReceiptSellWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create Receipt
     * Створення чеку продажу/повернення, його фіскалізація та доставка клієнту по email.
     * @param body  (required)
     * @return ApiResponse&lt;ReceiptModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReceiptModel> createReceiptSellWithHttpInfo(ReceiptSellPayload body) throws ApiException {
        com.squareup.okhttp.Call call = createReceiptSell(body, null, null);
        Type localVarReturnType = new TypeToken<ReceiptModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Receipt (asynchronously)
     * Створення чеку продажу/повернення, його фіскалізація та доставка клієнту по email.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createReceiptAsync(ReceiptSellPayload body, final ApiCallback<ReceiptModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createReceiptSell(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReceiptModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createServiceCurrencyReceipt
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createServiceCurrencyReceiptCall(ServiceCurrencyPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/receipts/service-currency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call createServiceCurrencyReceiptValidateBeforeCall(ServiceCurrencyPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createServiceCurrencyReceipt(Async)");
        }
        
        com.squareup.okhttp.Call call = createServiceCurrencyReceiptCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Service Currency Receipt
     * Створення сервісного чеку внесення або винесення коштів.  Призначено тільки для кас обміну валют.
     * @param body  (required)
     * @return ReceiptModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReceiptModel createServiceCurrencyReceipt(ServiceCurrencyPayload body) throws ApiException {
        ApiResponse<ReceiptModel> resp = createServiceCurrencyReceiptWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create Service Currency Receipt
     * Створення сервісного чеку внесення або винесення коштів.  Призначено тільки для кас обміну валют.
     * @param body  (required)
     * @return ApiResponse&lt;ReceiptModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReceiptModel> createServiceCurrencyReceiptWithHttpInfo(ServiceCurrencyPayload body) throws ApiException {
        com.squareup.okhttp.Call call = createServiceCurrencyReceiptValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ReceiptModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Service Currency Receipt (asynchronously)
     * Створення сервісного чеку внесення або винесення коштів.  Призначено тільки для кас обміну валют.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createServiceCurrencyReceiptAsync(ServiceCurrencyPayload body, final ApiCallback<ReceiptModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createServiceCurrencyReceiptValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReceiptModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createServiceReceipt
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createServiceReceiptCall(ReceiptServicePayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/receipts/service";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call createServiceReceiptValidateBeforeCall(ReceiptServicePayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createServiceReceipt(Async)");
        }
        
        com.squareup.okhttp.Call call = createServiceReceiptCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Service Receipt
     * Створення сервісного чеку внесення або винесення коштів  Для чеку сума винесення повинна бути вказана зі знаком мінус, а для внесення зі знаком плюс.
     * @param body  (required)
     * @return ReceiptModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReceiptModel createServiceReceipt(ReceiptServicePayload body) throws ApiException {
        ApiResponse<ReceiptModel> resp = createServiceReceiptWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create Service Receipt
     * Створення сервісного чеку внесення або винесення коштів  Для чеку сума винесення повинна бути вказана зі знаком мінус, а для внесення зі знаком плюс.
     * @param body  (required)
     * @return ApiResponse&lt;ReceiptModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReceiptModel> createServiceReceiptWithHttpInfo(ReceiptServicePayload body) throws ApiException {
        com.squareup.okhttp.Call call = createServiceReceiptValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ReceiptModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Service Receipt (asynchronously)
     * Створення сервісного чеку внесення або винесення коштів  Для чеку сума винесення повинна бути вказана зі знаком мінус, а для внесення зі знаком плюс.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createServiceReceiptAsync(ReceiptServicePayload body, final ApiCallback<ReceiptModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createServiceReceiptValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReceiptModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createShift
     * @param xLicenseKey  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createShiftCall(String xLicenseKey, CreateShiftPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/shifts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));
        if (xLicenseKey != null)
        localVarHeaderParams.put("X-License-Key", apiClient.parameterToString(xLicenseKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call createShiftValidateBeforeCall(String xLicenseKey, CreateShiftPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xLicenseKey' is set
        if (xLicenseKey == null) {
            throw new ApiException("Missing the required parameter 'xLicenseKey' when calling createShift(Async)");
        }
        
        com.squareup.okhttp.Call call = createShiftCall(xLicenseKey, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Shift
     * Відкриття нової зміни касиром.  Для створення зміни необхідно вказати ключ ліцензії конкретного пРРО розташованого в тій же торговій точці, що знаходиться касир.  Створюється об&#x27;єкт зміни в стані \&quot;CREATED\&quot; та транзакція відкриття зміни (поле \&quot;initial_transaction\&quot;).  Для переведення зміни в статус OPENED необхідно щоб транзакція була підписана за допомогою КЕП та доставлена в ДПС, це як правило триває декілька секунд.  Після створення запиту необхідно відслідковувати статус зміни доки він не змінить на OPENED або CLOSED.  Статус зміни можна відслідковувати за допомогою GET запиту по шляху /api/v1/shifts/{shift_id}, де {shift_id} - ідентифікатор зміни. Або /api/v1/cashier/shift  У разі, якщо зміна перейшла у статус CLOSED - це значить, що зміна не може бути відкрита. Деталізація причини відмови у створенні зміни знаходиться в полі initial_transaciton.  Після того як робочу зміну буде успішно відкрито можна її закрити або створювати чеки.
     * @param xLicenseKey  (required)
     * @param body  (optional)
     * @return ShiftWithCashierAndCashRegister
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShiftWithCashierAndCashRegister openShift(String xLicenseKey, CreateShiftPayload body) throws ApiException {
        ApiResponse<ShiftWithCashierAndCashRegister> resp = openShiftWithHttpInfo(xLicenseKey, body);
        return resp.getData();
    }

    /**
     * Create Shift
     * Відкриття нової зміни касиром.  Для створення зміни необхідно вказати ключ ліцензії конкретного пРРО розташованого в тій же торговій точці, що знаходиться касир.  Створюється об&#x27;єкт зміни в стані \&quot;CREATED\&quot; та транзакція відкриття зміни (поле \&quot;initial_transaction\&quot;).  Для переведення зміни в статус OPENED необхідно щоб транзакція була підписана за допомогою КЕП та доставлена в ДПС, це як правило триває декілька секунд.  Після створення запиту необхідно відслідковувати статус зміни доки він не змінить на OPENED або CLOSED.  Статус зміни можна відслідковувати за допомогою GET запиту по шляху /api/v1/shifts/{shift_id}, де {shift_id} - ідентифікатор зміни. Або /api/v1/cashier/shift  У разі, якщо зміна перейшла у статус CLOSED - це значить, що зміна не може бути відкрита. Деталізація причини відмови у створенні зміни знаходиться в полі initial_transaciton.  Після того як робочу зміну буде успішно відкрито можна її закрити або створювати чеки.
     * @param xLicenseKey  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ShiftWithCashierAndCashRegister&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShiftWithCashierAndCashRegister> openShiftWithHttpInfo(String xLicenseKey, CreateShiftPayload body) throws ApiException {
        com.squareup.okhttp.Call call = createShiftValidateBeforeCall(xLicenseKey, body, null, null);
        Type localVarReturnType = new TypeToken<ShiftWithCashierAndCashRegister>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Shift (asynchronously)
     * Відкриття нової зміни касиром.  Для створення зміни необхідно вказати ключ ліцензії конкретного пРРО розташованого в тій же торговій точці, що знаходиться касир.  Створюється об&#x27;єкт зміни в стані \&quot;CREATED\&quot; та транзакція відкриття зміни (поле \&quot;initial_transaction\&quot;).  Для переведення зміни в статус OPENED необхідно щоб транзакція була підписана за допомогою КЕП та доставлена в ДПС, це як правило триває декілька секунд.  Після створення запиту необхідно відслідковувати статус зміни доки він не змінить на OPENED або CLOSED.  Статус зміни можна відслідковувати за допомогою GET запиту по шляху /api/v1/shifts/{shift_id}, де {shift_id} - ідентифікатор зміни. Або /api/v1/cashier/shift  У разі, якщо зміна перейшла у статус CLOSED - це значить, що зміна не може бути відкрита. Деталізація причини відмови у створенні зміни знаходиться в полі initial_transaciton.  Після того як робочу зміну буде успішно відкрито можна її закрити або створювати чеки.
     * @param xLicenseKey  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createShiftAsync(String xLicenseKey, CreateShiftPayload body, final ApiCallback<ShiftWithCashierAndCashRegister> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createShiftValidateBeforeCall(xLicenseKey, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ShiftWithCashierAndCashRegister>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createXReport
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createXReportCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call createXReportValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = createXReportCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create X Report
     * Генерація X звіту
     * @return ReportModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportModel createXReport() throws ApiException {
        ApiResponse<ReportModel> resp = createXReportWithHttpInfo();
        return resp.getData();
    }

    /**
     * Create X Report
     * Генерація X звіту
     * @return ApiResponse&lt;ReportModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportModel> createXReportWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = createXReportValidateBeforeCall( null, null);
        Type localVarReturnType = new TypeToken<ReportModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create X Report (asynchronously)
     * Генерація X звіту
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createXReportAsync(final ApiCallback<ReportModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createXReportValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteWebhook
     * @param xLicenseKey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWebhookCall(String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));
        if (xLicenseKey != null)
        localVarHeaderParams.put("X-License-Key", apiClient.parameterToString(xLicenseKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call deleteWebhookValidateBeforeCall(String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xLicenseKey' is set
        if (xLicenseKey == null) {
            throw new ApiException("Missing the required parameter 'xLicenseKey' when calling deleteWebhook(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteWebhookCall(xLicenseKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Webhook
     * Метод видаляє налаштування вебхуків
     * @param xLicenseKey  (required)
     * @return DeleteWebhookSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteWebhookSchema deleteWebhook(String xLicenseKey) throws ApiException {
        ApiResponse<DeleteWebhookSchema> resp = deleteWebhookWithHttpInfo(xLicenseKey);
        return resp.getData();
    }

    /**
     * Delete Webhook
     * Метод видаляє налаштування вебхуків
     * @param xLicenseKey  (required)
     * @return ApiResponse&lt;DeleteWebhookSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteWebhookSchema> deleteWebhookWithHttpInfo(String xLicenseKey) throws ApiException {
        com.squareup.okhttp.Call call = deleteWebhookValidateBeforeCall(xLicenseKey, null, null);
        Type localVarReturnType = new TypeToken<DeleteWebhookSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Webhook (asynchronously)
     * Метод видаляє налаштування вебхуків
     * @param xLicenseKey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWebhookAsync(String xLicenseKey, final ApiCallback<DeleteWebhookSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWebhookValidateBeforeCall(xLicenseKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteWebhookSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for exchange
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call exchangeCall(CurrencyExchangePayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/receipts/currency-exchange";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call exchangeValidateBeforeCall(CurrencyExchangePayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling exchange(Async)");
        }
        
        com.squareup.okhttp.Call call = exchangeCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Exchange
     * Створення чеку обміну валют, доступно тільки для ПРРО відповідного типу.
     * @param body  (required)
     * @return ReceiptModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReceiptModel exchange(CurrencyExchangePayload body) throws ApiException {
        ApiResponse<ReceiptModel> resp = exchangeWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Exchange
     * Створення чеку обміну валют, доступно тільки для ПРРО відповідного типу.
     * @param body  (required)
     * @return ApiResponse&lt;ReceiptModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReceiptModel> exchangeWithHttpInfo(CurrencyExchangePayload body) throws ApiException {
        com.squareup.okhttp.Call call = exchangeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ReceiptModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Exchange (asynchronously)
     * Створення чеку обміну валют, доступно тільки для ПРРО відповідного типу.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exchangeAsync(CurrencyExchangePayload body, final ApiCallback<ReceiptModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exchangeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReceiptModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllTaxes
     * @param xLicenseKey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllTaxesCall(String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/tax";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));
        if (xLicenseKey != null)
        localVarHeaderParams.put("X-License-Key", apiClient.parameterToString(xLicenseKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getAllTaxesValidateBeforeCall(String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xLicenseKey' is set
        if (xLicenseKey == null) {
            throw new ApiException("Missing the required parameter 'xLicenseKey' when calling getAllTaxes(Async)");
        }
        
        com.squareup.okhttp.Call call = getAllTaxesCall(xLicenseKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get All Taxes
     * Отримання налаштувань податків
     * @param xLicenseKey  (required)
     * @return List&lt;TaxModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TaxModel> getAllTaxes(String xLicenseKey) throws ApiException {
        ApiResponse<List<TaxModel>> resp = getAllTaxesWithHttpInfo(xLicenseKey);
        return resp.getData();
    }

    /**
     * Get All Taxes
     * Отримання налаштувань податків
     * @param xLicenseKey  (required)
     * @return ApiResponse&lt;List&lt;TaxModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TaxModel>> getAllTaxesWithHttpInfo(String xLicenseKey) throws ApiException {
        com.squareup.okhttp.Call call = getAllTaxesValidateBeforeCall(xLicenseKey, null, null);
        Type localVarReturnType = new TypeToken<List<TaxModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Taxes (asynchronously)
     * Отримання налаштувань податків
     * @param xLicenseKey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllTaxesAsync(String xLicenseKey, final ApiCallback<List<TaxModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllTaxesValidateBeforeCall(xLicenseKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TaxModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCashRegister
     * @param cashRegisterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCashRegisterCall(UUID cashRegisterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/cash-registers/{cash_register_id}"
            .replaceAll("\\{" + "cash_register_id" + "\\}", apiClient.escapeString(cashRegisterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getCashRegisterValidateBeforeCall(UUID cashRegisterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'cashRegisterId' is set
        if (cashRegisterId == null) {
            throw new ApiException("Missing the required parameter 'cashRegisterId' when calling getCashRegister(Async)");
        }
        
        com.squareup.okhttp.Call call = getCashRegisterCall(cashRegisterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Cash Register
     * Отримання інформації про пРРО
     * @param cashRegisterId  (required)
     * @return DetailedCashRegisterModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DetailedCashRegisterModel getCashRegister(UUID cashRegisterId) throws ApiException {
        ApiResponse<DetailedCashRegisterModel> resp = getCashRegisterWithHttpInfo(cashRegisterId);
        return resp.getData();
    }

    /**
     * Get Cash Register
     * Отримання інформації про пРРО
     * @param cashRegisterId  (required)
     * @return ApiResponse&lt;DetailedCashRegisterModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DetailedCashRegisterModel> getCashRegisterWithHttpInfo(UUID cashRegisterId) throws ApiException {
        com.squareup.okhttp.Call call = getCashRegisterValidateBeforeCall(cashRegisterId, null, null);
        Type localVarReturnType = new TypeToken<DetailedCashRegisterModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Cash Register (asynchronously)
     * Отримання інформації про пРРО
     * @param cashRegisterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCashRegisterAsync(UUID cashRegisterId, final ApiCallback<DetailedCashRegisterModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCashRegisterValidateBeforeCall(cashRegisterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DetailedCashRegisterModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCashRegisterInfo
     * @param xLicenseKey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCashRegisterInfoCall(String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/cash-registers/info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));
        if (xLicenseKey != null)
        localVarHeaderParams.put("X-License-Key", apiClient.parameterToString(xLicenseKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getCashRegisterInfoValidateBeforeCall(String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xLicenseKey' is set
        if (xLicenseKey == null) {
            throw new ApiException("Missing the required parameter 'xLicenseKey' when calling getCashRegisterInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = getCashRegisterInfoCall(xLicenseKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Cash Register Info
     * Отримання інформації про пРРО за ключем ліцензії. Необхідно для агенту РРО.
     * @param xLicenseKey  (required)
     * @return CashRegisterDeviceModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CashRegisterDeviceModel getCashRegisterInfo(String xLicenseKey) throws ApiException {
        ApiResponse<CashRegisterDeviceModel> resp = getCashRegisterInfoWithHttpInfo(xLicenseKey);
        return resp.getData();
    }

    /**
     * Get Cash Register Info
     * Отримання інформації про пРРО за ключем ліцензії. Необхідно для агенту РРО.
     * @param xLicenseKey  (required)
     * @return ApiResponse&lt;CashRegisterDeviceModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CashRegisterDeviceModel> getCashRegisterInfoWithHttpInfo(String xLicenseKey) throws ApiException {
        com.squareup.okhttp.Call call = getCashRegisterInfoValidateBeforeCall(xLicenseKey, null, null);
        Type localVarReturnType = new TypeToken<CashRegisterDeviceModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Cash Register Info (asynchronously)
     * Отримання інформації про пРРО за ключем ліцензії. Необхідно для агенту РРО.
     * @param xLicenseKey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCashRegisterInfoAsync(String xLicenseKey, final ApiCallback<CashRegisterDeviceModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCashRegisterInfoValidateBeforeCall(xLicenseKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CashRegisterDeviceModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCashRegisters
     * @param inUse  (optional)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCashRegistersCall(Boolean inUse, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/cash-registers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inUse != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("in_use", inUse));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getCashRegistersValidateBeforeCall(Boolean inUse, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getCashRegistersCall(inUse, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Cash Registers
     * Отримання переліку доступних пРРО
     * @param inUse  (optional)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @return PaginatedResultDetailedCashRegisterModel_
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedResultDetailedCashRegisterModel_ getCashRegisters(Boolean inUse, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedResultDetailedCashRegisterModel_> resp = getCashRegistersWithHttpInfo(inUse, limit, offset);
        return resp.getData();
    }

    /**
     * Get Cash Registers
     * Отримання переліку доступних пРРО
     * @param inUse  (optional)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PaginatedResultDetailedCashRegisterModel_&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedResultDetailedCashRegisterModel_> getCashRegistersWithHttpInfo(Boolean inUse, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getCashRegistersValidateBeforeCall(inUse, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<PaginatedResultDetailedCashRegisterModel_>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Cash Registers (asynchronously)
     * Отримання переліку доступних пРРО
     * @param inUse  (optional)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCashRegistersAsync(Boolean inUse, Integer limit, Integer offset, final ApiCallback<PaginatedResultDetailedCashRegisterModel_> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCashRegistersValidateBeforeCall(inUse, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedResultDetailedCashRegisterModel_>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCashierProfileApiV1CashierMeGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCashierProfileApiV1CashierMeGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/cashier/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getCashierProfileApiV1CashierMeGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getCashierProfileApiV1CashierMeGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Cashier Profile
     * Отримання інформації про поточного користувача (касира)
     * @return DetailedCashierModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DetailedCashierModel getCashierProfileApiV1CashierMeGet() throws ApiException {
        ApiResponse<DetailedCashierModel> resp = getCashierProfileApiV1CashierMeGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Cashier Profile
     * Отримання інформації про поточного користувача (касира)
     * @return ApiResponse&lt;DetailedCashierModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DetailedCashierModel> getCashierProfileApiV1CashierMeGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCashierProfileApiV1CashierMeGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<DetailedCashierModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Cashier Profile (asynchronously)
     * Отримання інформації про поточного користувача (касира)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCashierProfileApiV1CashierMeGetAsync(final ApiCallback<DetailedCashierModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCashierProfileApiV1CashierMeGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DetailedCashierModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCashierShiftApiV1CashierShiftGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCashierShiftApiV1CashierShiftGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/cashier/shift";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getCashierShiftApiV1CashierShiftGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getCashierShiftApiV1CashierShiftGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Cashier Shift
     * Отримання інформації про активну зміну користувача (касира)
     * @return ShiftWithCashRegisterModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShiftWithCashRegisterModel getCashierShiftApiV1CashierShiftGet() throws ApiException {
        ApiResponse<ShiftWithCashRegisterModel> resp = getCashierShiftApiV1CashierShiftGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Cashier Shift
     * Отримання інформації про активну зміну користувача (касира)
     * @return ApiResponse&lt;ShiftWithCashRegisterModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShiftWithCashRegisterModel> getCashierShiftApiV1CashierShiftGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCashierShiftApiV1CashierShiftGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ShiftWithCashRegisterModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Cashier Shift (asynchronously)
     * Отримання інформації про активну зміну користувача (касира)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCashierShiftApiV1CashierShiftGetAsync(final ApiCallback<ShiftWithCashRegisterModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCashierShiftApiV1CashierShiftGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ShiftWithCashRegisterModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOfflineCodesOfflineCodesGet
     * @param count Maximal number of codes to get (optional, default to 150)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOfflineCodesOfflineCodesGetCall(Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/cash-registers/get-offline-codes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getOfflineCodesOfflineCodesGetValidateBeforeCall(Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getOfflineCodesOfflineCodesGetCall(count, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Offline Codes
     * Синхронне отримання списку доступних для використання фіскальних номерів для офлайн режиму для активного касового реєстратора. Номери отримуються з бази транзакційного процесингу, якщо вони там є. В цю базу вони потрапляють в результаті виклику метода ask-offline-codes. Номер вважається використаним транзакційним процесингом, якщо отримано чек з цим номером. Тобто повторні запити на отримання номерів будуть повертати ті самі набори, якщо між ними не було передачі чеків.
     * @param count Maximal number of codes to get (optional, default to 150)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getOfflineCodesOfflineCodesGet(Integer count) throws ApiException {
        ApiResponse<Object> resp = getOfflineCodesOfflineCodesGetWithHttpInfo(count);
        return resp.getData();
    }

    /**
     * Get Offline Codes
     * Синхронне отримання списку доступних для використання фіскальних номерів для офлайн режиму для активного касового реєстратора. Номери отримуються з бази транзакційного процесингу, якщо вони там є. В цю базу вони потрапляють в результаті виклику метода ask-offline-codes. Номер вважається використаним транзакційним процесингом, якщо отримано чек з цим номером. Тобто повторні запити на отримання номерів будуть повертати ті самі набори, якщо між ними не було передачі чеків.
     * @param count Maximal number of codes to get (optional, default to 150)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getOfflineCodesOfflineCodesGetWithHttpInfo(Integer count) throws ApiException {
        com.squareup.okhttp.Call call = getOfflineCodesOfflineCodesGetValidateBeforeCall(count, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Offline Codes (asynchronously)
     * Синхронне отримання списку доступних для використання фіскальних номерів для офлайн режиму для активного касового реєстратора. Номери отримуються з бази транзакційного процесингу, якщо вони там є. В цю базу вони потрапляють в результаті виклику метода ask-offline-codes. Номер вважається використаним транзакційним процесингом, якщо отримано чек з цим номером. Тобто повторні запити на отримання номерів будуть повертати ті самі набори, якщо між ними не було передачі чеків.
     * @param count Maximal number of codes to get (optional, default to 150)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOfflineCodesOfflineCodesGetAsync(Integer count, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOfflineCodesOfflineCodesGetValidateBeforeCall(count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOfflineCodesCountOfflineCodesCountGet
     * @param xLicenseKey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOfflineCodesCountOfflineCodesCountGetCall(String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/cash-registers/get-offline-codes-count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));
        if (xLicenseKey != null)
        localVarHeaderParams.put("X-License-Key", apiClient.parameterToString(xLicenseKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getOfflineCodesCountOfflineCodesCountGetValidateBeforeCall(String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xLicenseKey' is set
        if (xLicenseKey == null) {
            throw new ApiException("Missing the required parameter 'xLicenseKey' when calling getOfflineCodesCountOfflineCodesCountGet(Async)");
        }
        
        com.squareup.okhttp.Call call = getOfflineCodesCountOfflineCodesCountGetCall(xLicenseKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Offline Codes Count
     * Отримання кількості офлайн кодів
     * @param xLicenseKey  (required)
     * @return OfflineCodesCountSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OfflineCodesCountSchema getOfflineCodesCountOfflineCodesCountGet(String xLicenseKey) throws ApiException {
        ApiResponse<OfflineCodesCountSchema> resp = getOfflineCodesCountOfflineCodesCountGetWithHttpInfo(xLicenseKey);
        return resp.getData();
    }

    /**
     * Get Offline Codes Count
     * Отримання кількості офлайн кодів
     * @param xLicenseKey  (required)
     * @return ApiResponse&lt;OfflineCodesCountSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OfflineCodesCountSchema> getOfflineCodesCountOfflineCodesCountGetWithHttpInfo(String xLicenseKey) throws ApiException {
        com.squareup.okhttp.Call call = getOfflineCodesCountOfflineCodesCountGetValidateBeforeCall(xLicenseKey, null, null);
        Type localVarReturnType = new TypeToken<OfflineCodesCountSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Offline Codes Count (asynchronously)
     * Отримання кількості офлайн кодів
     * @param xLicenseKey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOfflineCodesCountOfflineCodesCountGetAsync(String xLicenseKey, final ApiCallback<OfflineCodesCountSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOfflineCodesCountOfflineCodesCountGetValidateBeforeCall(xLicenseKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OfflineCodesCountSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOfflineTimeOfflineTimeGet
     * @param xLicenseKey  (required)
     * @param fromDate Час офлайн починаючи від дати (optional)
     * @param toDate Час офлайн закінчуючи до дати (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOfflineTimeOfflineTimeGetCall(String xLicenseKey, OffsetDateTime fromDate, OffsetDateTime toDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/cash-registers/get-offline-time";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from_date", fromDate));
        if (toDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to_date", toDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));
        if (xLicenseKey != null)
        localVarHeaderParams.put("X-License-Key", apiClient.parameterToString(xLicenseKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getOfflineTimeOfflineTimeGetValidateBeforeCall(String xLicenseKey, OffsetDateTime fromDate, OffsetDateTime toDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xLicenseKey' is set
        if (xLicenseKey == null) {
            throw new ApiException("Missing the required parameter 'xLicenseKey' when calling getOfflineTimeOfflineTimeGet(Async)");
        }
        
        com.squareup.okhttp.Call call = getOfflineTimeOfflineTimeGetCall(xLicenseKey, fromDate, toDate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Offline Time
     * 
     * @param xLicenseKey  (required)
     * @param fromDate Час офлайн починаючи від дати (optional)
     * @param toDate Час офлайн закінчуючи до дати (optional)
     * @return CashRegisterOfflineTime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CashRegisterOfflineTime getOfflineTimeOfflineTimeGet(String xLicenseKey, OffsetDateTime fromDate, OffsetDateTime toDate) throws ApiException {
        ApiResponse<CashRegisterOfflineTime> resp = getOfflineTimeOfflineTimeGetWithHttpInfo(xLicenseKey, fromDate, toDate);
        return resp.getData();
    }

    /**
     * Get Offline Time
     * 
     * @param xLicenseKey  (required)
     * @param fromDate Час офлайн починаючи від дати (optional)
     * @param toDate Час офлайн закінчуючи до дати (optional)
     * @return ApiResponse&lt;CashRegisterOfflineTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CashRegisterOfflineTime> getOfflineTimeOfflineTimeGetWithHttpInfo(String xLicenseKey, OffsetDateTime fromDate, OffsetDateTime toDate) throws ApiException {
        com.squareup.okhttp.Call call = getOfflineTimeOfflineTimeGetValidateBeforeCall(xLicenseKey, fromDate, toDate, null, null);
        Type localVarReturnType = new TypeToken<CashRegisterOfflineTime>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Offline Time (asynchronously)
     * 
     * @param xLicenseKey  (required)
     * @param fromDate Час офлайн починаючи від дати (optional)
     * @param toDate Час офлайн закінчуючи до дати (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOfflineTimeOfflineTimeGetAsync(String xLicenseKey, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback<CashRegisterOfflineTime> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOfflineTimeOfflineTimeGetValidateBeforeCall(xLicenseKey, fromDate, toDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CashRegisterOfflineTime>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrder
     * @param orderId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderCall(UUID orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/orders/{order_id}"
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getOrderValidateBeforeCall(UUID orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrder(Async)");
        }
        
        com.squareup.okhttp.Call call = getOrderCall(orderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Order
     * 
     * @param orderId  (required)
     * @return OrderModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderModel getOrder(UUID orderId) throws ApiException {
        ApiResponse<OrderModel> resp = getOrderWithHttpInfo(orderId);
        return resp.getData();
    }

    /**
     * Get Order
     * 
     * @param orderId  (required)
     * @return ApiResponse&lt;OrderModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderModel> getOrderWithHttpInfo(UUID orderId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderValidateBeforeCall(orderId, null, null);
        Type localVarReturnType = new TypeToken<OrderModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Order (asynchronously)
     * 
     * @param orderId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderAsync(UUID orderId, final ApiCallback<OrderModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderValidateBeforeCall(orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrders
     * @param desc  (optional, default to true)
     * @param status  (optional)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrdersCall(Boolean desc, List<OrderStatus> status, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (desc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("desc", desc));
        if (status != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "status", status));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getOrdersValidateBeforeCall(Boolean desc, List<OrderStatus> status, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getOrdersCall(desc, status, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Orders
     * 
     * @param desc  (optional, default to true)
     * @param status  (optional)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @return PaginatedResultOrderModel_
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedResultOrderModel_ getOrders(Boolean desc, List<OrderStatus> status, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedResultOrderModel_> resp = getOrdersWithHttpInfo(desc, status, limit, offset);
        return resp.getData();
    }

    /**
     * Get Orders
     * 
     * @param desc  (optional, default to true)
     * @param status  (optional)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PaginatedResultOrderModel_&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedResultOrderModel_> getOrdersWithHttpInfo(Boolean desc, List<OrderStatus> status, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getOrdersValidateBeforeCall(desc, status, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<PaginatedResultOrderModel_>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Orders (asynchronously)
     * 
     * @param desc  (optional, default to true)
     * @param status  (optional)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrdersAsync(Boolean desc, List<OrderStatus> status, Integer limit, Integer offset, final ApiCallback<PaginatedResultOrderModel_> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrdersValidateBeforeCall(desc, status, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedResultOrderModel_>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPeriodicalReport
     * @param fromDate  (required)
     * @param toDate  (required)
     * @param xLicenseKey  (required)
     * @param width  (optional, default to 42)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPeriodicalReportCall(OffsetDateTime fromDate, OffsetDateTime toDate, String xLicenseKey, Integer width, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/reports/periodical";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from_date", fromDate));
        if (toDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to_date", toDate));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));
        if (xLicenseKey != null)
        localVarHeaderParams.put("X-License-Key", apiClient.parameterToString(xLicenseKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getPeriodicalReportValidateBeforeCall(OffsetDateTime fromDate, OffsetDateTime toDate, String xLicenseKey, Integer width, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fromDate' is set
        if (fromDate == null) {
            throw new ApiException("Missing the required parameter 'fromDate' when calling getPeriodicalReport(Async)");
        }
        // verify the required parameter 'toDate' is set
        if (toDate == null) {
            throw new ApiException("Missing the required parameter 'toDate' when calling getPeriodicalReport(Async)");
        }
        // verify the required parameter 'xLicenseKey' is set
        if (xLicenseKey == null) {
            throw new ApiException("Missing the required parameter 'xLicenseKey' when calling getPeriodicalReport(Async)");
        }
        
        com.squareup.okhttp.Call call = getPeriodicalReportCall(fromDate, toDate, xLicenseKey, width, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Periodical Report
     * 
     * @param fromDate  (required)
     * @param toDate  (required)
     * @param xLicenseKey  (required)
     * @param width  (optional, default to 42)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getPeriodicalReport(OffsetDateTime fromDate, OffsetDateTime toDate, String xLicenseKey, Integer width) throws ApiException {
        ApiResponse<String> resp = getPeriodicalReportWithHttpInfo(fromDate, toDate, xLicenseKey, width);
        return resp.getData();
    }

    /**
     * Get Periodical Report
     * 
     * @param fromDate  (required)
     * @param toDate  (required)
     * @param xLicenseKey  (required)
     * @param width  (optional, default to 42)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getPeriodicalReportWithHttpInfo(OffsetDateTime fromDate, OffsetDateTime toDate, String xLicenseKey, Integer width) throws ApiException {
        com.squareup.okhttp.Call call = getPeriodicalReportValidateBeforeCall(fromDate, toDate, xLicenseKey, width, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Periodical Report (asynchronously)
     * 
     * @param fromDate  (required)
     * @param toDate  (required)
     * @param xLicenseKey  (required)
     * @param width  (optional, default to 42)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPeriodicalReportAsync(OffsetDateTime fromDate, OffsetDateTime toDate, String xLicenseKey, Integer width, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPeriodicalReportValidateBeforeCall(fromDate, toDate, xLicenseKey, width, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReceipt
     * @param receiptId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReceiptCall(UUID receiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/receipts/{receipt_id}"
            .replaceAll("\\{" + "receipt_id" + "\\}", apiClient.escapeString(receiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getReceiptValidateBeforeCall(UUID receiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'receiptId' is set
        if (receiptId == null) {
            throw new ApiException("Missing the required parameter 'receiptId' when calling getReceipt(Async)");
        }
        
        com.squareup.okhttp.Call call = getReceiptCall(receiptId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Receipt
     * Отримання інформації про чек.
     * @param receiptId  (required)
     * @return ReceiptModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReceiptModel getReceiptByID(UUID receiptId) throws ApiException {
        ApiResponse<ReceiptModel> resp = getReceiptByIDWithHttpInfo(receiptId);
        return resp.getData();
    }

    /**
     * Get Receipt
     * Отримання інформації про чек.
     * @param receiptId  (required)
     * @return ApiResponse&lt;ReceiptModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReceiptModel> getReceiptByIDWithHttpInfo(UUID receiptId) throws ApiException {
        com.squareup.okhttp.Call call = getReceiptValidateBeforeCall(receiptId, null, null);
        Type localVarReturnType = new TypeToken<ReceiptModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Receipt (asynchronously)
     * Отримання інформації про чек.
     * @param receiptId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReceiptByIDAsync(UUID receiptId, final ApiCallback<ReceiptModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReceiptValidateBeforeCall(receiptId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReceiptModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReceiptHtml
     * @param receiptId  (required)
     * @param simple  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReceiptHtmlCall(UUID receiptId, Boolean simple, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/receipts/{receipt_id}/html"
            .replaceAll("\\{" + "receipt_id" + "\\}", apiClient.escapeString(receiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (simple != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("simple", simple));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getReceiptHtmlValidateBeforeCall(UUID receiptId, Boolean simple, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'receiptId' is set
        if (receiptId == null) {
            throw new ApiException("Missing the required parameter 'receiptId' when calling getReceiptHtml(Async)");
        }
        
        com.squareup.okhttp.Call call = getReceiptHtmlCall(receiptId, simple, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Receipt Html
     * Отримання HTML представлення чеку згідно &lt;a href&#x3D;\&quot;https://zakon.rada.gov.ua/laws/show/z0832-21#Text\&quot;&gt;наказу №329 від 08.06.2021&lt;/a&gt;.
     * @param receiptId  (required)
     * @param simple  (optional, default to false)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getReceiptHtml(UUID receiptId, Boolean simple) throws ApiException {
        ApiResponse<String> resp = getReceiptHtmlWithHttpInfo(receiptId, simple);
        return resp.getData();
    }

    /**
     * Get Receipt Html
     * Отримання HTML представлення чеку згідно &lt;a href&#x3D;\&quot;https://zakon.rada.gov.ua/laws/show/z0832-21#Text\&quot;&gt;наказу №329 від 08.06.2021&lt;/a&gt;.
     * @param receiptId  (required)
     * @param simple  (optional, default to false)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getReceiptHtmlWithHttpInfo(UUID receiptId, Boolean simple) throws ApiException {
        com.squareup.okhttp.Call call = getReceiptHtmlValidateBeforeCall(receiptId, simple, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Receipt Html (asynchronously)
     * Отримання HTML представлення чеку згідно &lt;a href&#x3D;\&quot;https://zakon.rada.gov.ua/laws/show/z0832-21#Text\&quot;&gt;наказу №329 від 08.06.2021&lt;/a&gt;.
     * @param receiptId  (required)
     * @param simple  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReceiptHtmlAsync(UUID receiptId, Boolean simple, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReceiptHtmlValidateBeforeCall(receiptId, simple, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReceiptPdf
     * @param receiptId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReceiptPdfCall(UUID receiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/receipts/{receipt_id}/pdf"
            .replaceAll("\\{" + "receipt_id" + "\\}", apiClient.escapeString(receiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getReceiptPdfValidateBeforeCall(UUID receiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'receiptId' is set
        if (receiptId == null) {
            throw new ApiException("Missing the required parameter 'receiptId' when calling getReceiptPdf(Async)");
        }
        
        com.squareup.okhttp.Call call = getReceiptPdfCall(receiptId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Receipt Pdf
     * Отримання PDF представлення чеку згідно &lt;a href&#x3D;\&quot;https://zakon.rada.gov.ua/laws/show/z0832-21#Text\&quot;&gt;наказу №329 від 08.06.2021&lt;/a&gt;.
     * @param receiptId  (required)
     * @return 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getReceiptPdf(UUID receiptId) throws ApiException {
        return getReceiptPdfWithHttpInfo(receiptId).getData();
    }

    /**
     * Get Receipt Pdf
     * Отримання PDF представлення чеку згідно &lt;a href&#x3D;\&quot;https://zakon.rada.gov.ua/laws/show/z0832-21#Text\&quot;&gt;наказу №329 від 08.06.2021&lt;/a&gt;.
     * @param receiptId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getReceiptPdfWithHttpInfo(UUID receiptId) throws ApiException {
        com.squareup.okhttp.Call call = getReceiptPdfValidateBeforeCall(receiptId, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Receipt Pdf (asynchronously)
     * Отримання PDF представлення чеку згідно &lt;a href&#x3D;\&quot;https://zakon.rada.gov.ua/laws/show/z0832-21#Text\&quot;&gt;наказу №329 від 08.06.2021&lt;/a&gt;.
     * @param receiptId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReceiptPdfAsync(UUID receiptId, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReceiptPdfValidateBeforeCall(receiptId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReceiptPng
     * @param receiptId  (required)
     * @param width Кількість символів у рядку (optional, default to 30)
     * @param paperWidth Ширина паперу у міліметрах (optional, default to 58)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReceiptPngCall(UUID receiptId, Integer width, Integer paperWidth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/receipts/{receipt_id}/png"
            .replaceAll("\\{" + "receipt_id" + "\\}", apiClient.escapeString(receiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (paperWidth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("paper_width", paperWidth));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getReceiptPngValidateBeforeCall(UUID receiptId, Integer width, Integer paperWidth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'receiptId' is set
        if (receiptId == null) {
            throw new ApiException("Missing the required parameter 'receiptId' when calling getReceiptPng(Async)");
        }
        
        com.squareup.okhttp.Call call = getReceiptPngCall(receiptId, width, paperWidth, progressListener, progressRequestListener);
        return call;
        
    }

    /**
     * Get Receipt Png
     * Отримання графічного представлення чека для термопринтеру згідно &lt;a href&#x3D;\&quot;https://zakon.rada.gov.ua/laws/show/z0832-21#Text\&quot;&gt;наказу №329 від 08.06.2021&lt;/a&gt;.
     * @param receiptId  (required)
     * @param width Кількість символів у рядку (optional, default to 30)
     * @param paperWidth Ширина паперу у міліметрах (optional, default to 58)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getReceiptPng(UUID receiptId, Integer width, Integer paperWidth) throws ApiException {
        return getReceiptPngWithHttpInfo(receiptId, width, paperWidth).getData();
    }

    /**
     * Get Receipt Png
     * Отримання графічного представлення чека для термопринтеру згідно &lt;a href&#x3D;\&quot;https://zakon.rada.gov.ua/laws/show/z0832-21#Text\&quot;&gt;наказу №329 від 08.06.2021&lt;/a&gt;.
     * @param receiptId  (required)
     * @param width Кількість символів у рядку (optional, default to 30)
     * @param paperWidth Ширина паперу у міліметрах (optional, default to 58)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getReceiptPngWithHttpInfo(UUID receiptId, Integer width, Integer paperWidth) throws ApiException {
        com.squareup.okhttp.Call call = getReceiptPngValidateBeforeCall(receiptId, width, paperWidth, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Receipt Png (asynchronously)
     * Отримання графічного представлення чека для термопринтеру згідно &lt;a href&#x3D;\&quot;https://zakon.rada.gov.ua/laws/show/z0832-21#Text\&quot;&gt;наказу №329 від 08.06.2021&lt;/a&gt;.
     * @param receiptId  (required)
     * @param width Кількість символів у рядку (optional, default to 30)
     * @param paperWidth Ширина паперу у міліметрах (optional, default to 58)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReceiptPngAsync(UUID receiptId, Integer width, Integer paperWidth, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReceiptPngValidateBeforeCall(receiptId, width, paperWidth, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReceiptQrCode
     * @param receiptId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReceiptQrCodeCall(UUID receiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/receipts/{receipt_id}/qrcode"
            .replaceAll("\\{" + "receipt_id" + "\\}", apiClient.escapeString(receiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getReceiptQrCodeValidateBeforeCall(UUID receiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'receiptId' is set
        if (receiptId == null) {
            throw new ApiException("Missing the required parameter 'receiptId' when calling getReceiptQrCode(Async)");
        }
        
        com.squareup.okhttp.Call call = getReceiptQrCodeCall(receiptId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Receipt Qr Code Image
     * Отримання зображення QR-коду чеку.
     * @param receiptId  (required)
     * @return 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getReceiptQrCodeImage(UUID receiptId) throws ApiException {
        return getReceiptQrCodeWithHttpInfo(receiptId).getData();
    }

    /**
     * Get Receipt Qr Code Image
     * Отримання зображення QR-коду чеку.
     * @param receiptId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getReceiptQrCodeWithHttpInfo(UUID receiptId) throws ApiException {
        com.squareup.okhttp.Call call = getReceiptQrCodeValidateBeforeCall(receiptId, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Receipt Qr Code Image (asynchronously)
     * Отримання зображення QR-коду чеку.
     * @param receiptId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReceiptQrCodeImageAsync(UUID receiptId, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReceiptQrCodeValidateBeforeCall(receiptId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReceiptText
     * @param receiptId  (required)
     * @param width Print area width in characters (optional, default to 42)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReceiptTextCall(UUID receiptId, Integer width, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/receipts/{receipt_id}/text"
            .replaceAll("\\{" + "receipt_id" + "\\}", apiClient.escapeString(receiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getReceiptTextValidateBeforeCall(UUID receiptId, Integer width, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'receiptId' is set
        if (receiptId == null) {
            throw new ApiException("Missing the required parameter 'receiptId' when calling getReceiptText(Async)");
        }
        
        com.squareup.okhttp.Call call = getReceiptTextCall(receiptId, width, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Receipt Text
     * Отримання текстового представлення чека для термопринтеру згідно &lt;a href&#x3D;\&quot;https://zakon.rada.gov.ua/laws/show/z0832-21#Text\&quot;&gt;наказу №329 від 08.06.2021&lt;/a&gt;.
     * @param receiptId  (required)
     * @param width Print area width in characters (optional, default to 42)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getReceiptText(UUID receiptId, Integer width) throws ApiException {
        ApiResponse<String> resp = getReceiptTextWithHttpInfo(receiptId, width);
        return resp.getData();
    }

    /**
     * Get Receipt Text
     * Отримання текстового представлення чека для термопринтеру згідно &lt;a href&#x3D;\&quot;https://zakon.rada.gov.ua/laws/show/z0832-21#Text\&quot;&gt;наказу №329 від 08.06.2021&lt;/a&gt;.
     * @param receiptId  (required)
     * @param width Print area width in characters (optional, default to 42)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getReceiptTextWithHttpInfo(UUID receiptId, Integer width) throws ApiException {
        com.squareup.okhttp.Call call = getReceiptTextValidateBeforeCall(receiptId, width, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Receipt Text (asynchronously)
     * Отримання текстового представлення чека для термопринтеру згідно &lt;a href&#x3D;\&quot;https://zakon.rada.gov.ua/laws/show/z0832-21#Text\&quot;&gt;наказу №329 від 08.06.2021&lt;/a&gt;.
     * @param receiptId  (required)
     * @param width Print area width in characters (optional, default to 42)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReceiptTextAsync(UUID receiptId, Integer width, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReceiptTextValidateBeforeCall(receiptId, width, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReceipts
     * @param fiscalCode Фіскальний номер (optional)
     * @param serial Порядковий номер (optional)
     * @param desc Зворотній порядок сортування (optional, default to false)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReceiptsCall(String fiscalCode, String serial, Boolean desc, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/receipts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fiscalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fiscal_code", fiscalCode));
        if (serial != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serial", serial));
        if (desc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("desc", desc));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getReceiptsValidateBeforeCall(String fiscalCode, String serial, Boolean desc, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getReceiptsCall(fiscalCode, serial, desc, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Receipts
     * Отримання списку чеків в рамках поточної зміни або за параметрами фільтрів  Пошук за порядковим та фіскальним номерами одночасно неможливий.  Якщо у касира немає активної зміни виконується пошук за організацією, у іншому випадку пошук виконується за кассою.
     * @param fiscalCode Фіскальний номер (optional)
     * @param serial Порядковий номер (optional)
     * @param desc Зворотній порядок сортування (optional, default to false)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @return PaginatedResultReceiptModel_
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedResultReceiptModel_ getReceipts(String fiscalCode, String serial, Boolean desc, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedResultReceiptModel_> resp = getReceiptsWithHttpInfo(fiscalCode, serial, desc, limit, offset);
        return resp.getData();
    }

    /**
     * Get Receipts
     * Отримання списку чеків в рамках поточної зміни або за параметрами фільтрів  Пошук за порядковим та фіскальним номерами одночасно неможливий.  Якщо у касира немає активної зміни виконується пошук за організацією, у іншому випадку пошук виконується за кассою.
     * @param fiscalCode Фіскальний номер (optional)
     * @param serial Порядковий номер (optional)
     * @param desc Зворотній порядок сортування (optional, default to false)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PaginatedResultReceiptModel_&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedResultReceiptModel_> getReceiptsWithHttpInfo(String fiscalCode, String serial, Boolean desc, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getReceiptsValidateBeforeCall(fiscalCode, serial, desc, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<PaginatedResultReceiptModel_>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Receipts (asynchronously)
     * Отримання списку чеків в рамках поточної зміни або за параметрами фільтрів  Пошук за порядковим та фіскальним номерами одночасно неможливий.  Якщо у касира немає активної зміни виконується пошук за організацією, у іншому випадку пошук виконується за кассою.
     * @param fiscalCode Фіскальний номер (optional)
     * @param serial Порядковий номер (optional)
     * @param desc Зворотній порядок сортування (optional, default to false)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReceiptsAsync(String fiscalCode, String serial, Boolean desc, Integer limit, Integer offset, final ApiCallback<PaginatedResultReceiptModel_> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReceiptsValidateBeforeCall(fiscalCode, serial, desc, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedResultReceiptModel_>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReceiptsSearch
     * @param fiscalCode Фіскальний номер чека (optional)
     * @param barcode Пошук за штрихкодом чеку (optional)
     * @param shiftId Фільтрування зміни (optional)
     * @param cashRegisterId Фільтрування каси (optional)
     * @param fromDate Чеки починаючи з дати (optional)
     * @param toDate Чеки раніше обраної дати (optional)
     * @param desc Зворотній порядок сортування (optional, default to false)
     * @param selfReceipts Показувати тільки власні чеки (optional, default to false)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReceiptsSearchCall(String fiscalCode, String barcode, List<UUID> shiftId, List<UUID> cashRegisterId, OffsetDateTime fromDate, OffsetDateTime toDate, Boolean desc, Boolean selfReceipts, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/receipts/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fiscalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fiscal_code", fiscalCode));
        if (barcode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("barcode", barcode));
        if (shiftId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "shift_id", shiftId));
        if (cashRegisterId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "cash_register_id", cashRegisterId));
        if (fromDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from_date", fromDate));
        if (toDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to_date", toDate));
        if (desc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("desc", desc));
        if (selfReceipts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("self_receipts", selfReceipts));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getReceiptsSearchValidateBeforeCall(String fiscalCode, String barcode, List<UUID> shiftId, List<UUID> cashRegisterId, OffsetDateTime fromDate, OffsetDateTime toDate, Boolean desc, Boolean selfReceipts, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getReceiptsSearchCall(fiscalCode, barcode, shiftId, cashRegisterId, fromDate, toDate, desc, selfReceipts, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Receipts Search
     * Отримання списку чеків за параметрами фільтрів
     * @param fiscalCode Фіскальний номер чека (optional)
     * @param barcode Пошук за штрихкодом чеку (optional)
     * @param shiftId Фільтрування зміни (optional)
     * @param cashRegisterId Фільтрування каси (optional)
     * @param fromDate Чеки починаючи з дати (optional)
     * @param toDate Чеки раніше обраної дати (optional)
     * @param desc Зворотній порядок сортування (optional, default to false)
     * @param selfReceipts Показувати тільки власні чеки (optional, default to false)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @return PaginatedResultReceiptModel_
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedResultReceiptModel_ getReceiptsSearch(String fiscalCode, String barcode, List<UUID> shiftId, List<UUID> cashRegisterId, OffsetDateTime fromDate, OffsetDateTime toDate, Boolean desc, Boolean selfReceipts, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedResultReceiptModel_> resp = getReceiptsSearchWithHttpInfo(fiscalCode, barcode, shiftId, cashRegisterId, fromDate, toDate, desc, selfReceipts, limit, offset);
        return resp.getData();
    }

    /**
     * Get Receipts Search
     * Отримання списку чеків за параметрами фільтрів
     * @param fiscalCode Фіскальний номер чека (optional)
     * @param barcode Пошук за штрихкодом чеку (optional)
     * @param shiftId Фільтрування зміни (optional)
     * @param cashRegisterId Фільтрування каси (optional)
     * @param fromDate Чеки починаючи з дати (optional)
     * @param toDate Чеки раніше обраної дати (optional)
     * @param desc Зворотній порядок сортування (optional, default to false)
     * @param selfReceipts Показувати тільки власні чеки (optional, default to false)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PaginatedResultReceiptModel_&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedResultReceiptModel_> getReceiptsSearchWithHttpInfo(String fiscalCode, String barcode, List<UUID> shiftId, List<UUID> cashRegisterId, OffsetDateTime fromDate, OffsetDateTime toDate, Boolean desc, Boolean selfReceipts, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getReceiptsSearchValidateBeforeCall(fiscalCode, barcode, shiftId, cashRegisterId, fromDate, toDate, desc, selfReceipts, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<PaginatedResultReceiptModel_>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Receipts Search (asynchronously)
     * Отримання списку чеків за параметрами фільтрів
     * @param fiscalCode Фіскальний номер чека (optional)
     * @param barcode Пошук за штрихкодом чеку (optional)
     * @param shiftId Фільтрування зміни (optional)
     * @param cashRegisterId Фільтрування каси (optional)
     * @param fromDate Чеки починаючи з дати (optional)
     * @param toDate Чеки раніше обраної дати (optional)
     * @param desc Зворотній порядок сортування (optional, default to false)
     * @param selfReceipts Показувати тільки власні чеки (optional, default to false)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReceiptsSearchAsync(String fiscalCode, String barcode, List<UUID> shiftId, List<UUID> cashRegisterId, OffsetDateTime fromDate, OffsetDateTime toDate, Boolean desc, Boolean selfReceipts, Integer limit, Integer offset, final ApiCallback<PaginatedResultReceiptModel_> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReceiptsSearchValidateBeforeCall(fiscalCode, barcode, shiftId, cashRegisterId, fromDate, toDate, desc, selfReceipts, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedResultReceiptModel_>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReport
     * @param reportId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportCall(UUID reportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/reports/{report_id}"
            .replaceAll("\\{" + "report_id" + "\\}", apiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getReportValidateBeforeCall(UUID reportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling getReport(Async)");
        }
        
        com.squareup.okhttp.Call call = getReportCall(reportId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Report
     * Отримання звіту
     * @param reportId  (required)
     * @return ReportModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportModel getReport(UUID reportId) throws ApiException {
        ApiResponse<ReportModel> resp = getReportWithHttpInfo(reportId);
        return resp.getData();
    }

    /**
     * Get Report
     * Отримання звіту
     * @param reportId  (required)
     * @return ApiResponse&lt;ReportModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportModel> getReportWithHttpInfo(UUID reportId) throws ApiException {
        com.squareup.okhttp.Call call = getReportValidateBeforeCall(reportId, null, null);
        Type localVarReturnType = new TypeToken<ReportModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Report (asynchronously)
     * Отримання звіту
     * @param reportId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportAsync(UUID reportId, final ApiCallback<ReportModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportValidateBeforeCall(reportId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReportText
     * @param reportId  (required)
     * @param width Print area width in characters (optional, default to 42)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportTextCall(UUID reportId, Integer width, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/reports/{report_id}/text"
            .replaceAll("\\{" + "report_id" + "\\}", apiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getReportTextValidateBeforeCall(UUID reportId, Integer width, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling getReportText(Async)");
        }
        
        com.squareup.okhttp.Call call = getReportTextCall(reportId, width, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Report Text
     * Отримання звіту в текстовому вигляді
     * @param reportId  (required)
     * @param width Print area width in characters (optional, default to 42)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getReportText(UUID reportId, Integer width) throws ApiException {
        ApiResponse<String> resp = getReportTextWithHttpInfo(reportId, width);
        return resp.getData();
    }

    /**
     * Get Report Text
     * Отримання звіту в текстовому вигляді
     * @param reportId  (required)
     * @param width Print area width in characters (optional, default to 42)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getReportTextWithHttpInfo(UUID reportId, Integer width) throws ApiException {
        com.squareup.okhttp.Call call = getReportTextValidateBeforeCall(reportId, width, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Report Text (asynchronously)
     * Отримання звіту в текстовому вигляді
     * @param reportId  (required)
     * @param width Print area width in characters (optional, default to 42)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportTextAsync(UUID reportId, Integer width, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportTextValidateBeforeCall(reportId, width, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReportText
     * @param reportId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportTextCall(UUID reportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/reports/{report_id}/xml"
            .replaceAll("\\{" + "report_id" + "\\}", apiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getReportTextValidateBeforeCall(UUID reportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling getReportText(Async)");
        }
        
        com.squareup.okhttp.Call call = getReportTextCall(reportId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Report Text
     * Отримання звіту в XML форматі
     * @param reportId  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getReportText(UUID reportId) throws ApiException {
        ApiResponse<String> resp = getReportTextWithHttpInfo(reportId);
        return resp.getData();
    }

    /**
     * Get Report Text
     * Отримання звіту в XML форматі
     * @param reportId  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getReportTextWithHttpInfo(UUID reportId) throws ApiException {
        com.squareup.okhttp.Call call = getReportTextValidateBeforeCall(reportId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Report Text (asynchronously)
     * Отримання звіту в XML форматі
     * @param reportId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportTextAsync(UUID reportId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportTextValidateBeforeCall(reportId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReports
     * @param fromDate  (optional)
     * @param toDate  (optional)
     * @param shiftId  (optional)
     * @param serial  (optional)
     * @param isZReport  (optional)
     * @param desc  (optional, default to false)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportsCall(OffsetDateTime fromDate, OffsetDateTime toDate, List<UUID> shiftId, String serial, Boolean isZReport, Boolean desc, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from_date", fromDate));
        if (toDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to_date", toDate));
        if (shiftId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "shift_id", shiftId));
        if (serial != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serial", serial));
        if (isZReport != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is_z_report", isZReport));
        if (desc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("desc", desc));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getReportsValidateBeforeCall(OffsetDateTime fromDate, OffsetDateTime toDate, List<UUID> shiftId, String serial, Boolean isZReport, Boolean desc, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getReportsCall(fromDate, toDate, shiftId, serial, isZReport, desc, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Reports
     * Отримання звітів (X та Z) за поточну зміні або звіти за обрану дату
     * @param fromDate  (optional)
     * @param toDate  (optional)
     * @param shiftId  (optional)
     * @param serial  (optional)
     * @param isZReport  (optional)
     * @param desc  (optional, default to false)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @return PaginatedResultReportModel_
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedResultReportModel_ getReports(OffsetDateTime fromDate, OffsetDateTime toDate, List<UUID> shiftId, String serial, Boolean isZReport, Boolean desc, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedResultReportModel_> resp = getReportsWithHttpInfo(fromDate, toDate, shiftId, serial, isZReport, desc, limit, offset);
        return resp.getData();
    }

    /**
     * Get Reports
     * Отримання звітів (X та Z) за поточну зміні або звіти за обрану дату
     * @param fromDate  (optional)
     * @param toDate  (optional)
     * @param shiftId  (optional)
     * @param serial  (optional)
     * @param isZReport  (optional)
     * @param desc  (optional, default to false)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PaginatedResultReportModel_&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedResultReportModel_> getReportsWithHttpInfo(OffsetDateTime fromDate, OffsetDateTime toDate, List<UUID> shiftId, String serial, Boolean isZReport, Boolean desc, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getReportsValidateBeforeCall(fromDate, toDate, shiftId, serial, isZReport, desc, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<PaginatedResultReportModel_>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Reports (asynchronously)
     * Отримання звітів (X та Z) за поточну зміні або звіти за обрану дату
     * @param fromDate  (optional)
     * @param toDate  (optional)
     * @param shiftId  (optional)
     * @param serial  (optional)
     * @param isZReport  (optional)
     * @param desc  (optional, default to false)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportsAsync(OffsetDateTime fromDate, OffsetDateTime toDate, List<UUID> shiftId, String serial, Boolean isZReport, Boolean desc, Integer limit, Integer offset, final ApiCallback<PaginatedResultReportModel_> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportsValidateBeforeCall(fromDate, toDate, shiftId, serial, isZReport, desc, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedResultReportModel_>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSearchReports
     * @param fromDate  (optional)
     * @param toDate  (optional)
     * @param shiftId  (optional)
     * @param serial  (optional)
     * @param isZReport  (optional)
     * @param desc  (optional, default to false)
     * @param cashRegisterId  (optional, default to [])
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSearchReportsCall(OffsetDateTime fromDate, OffsetDateTime toDate, List<UUID> shiftId, String serial, Boolean isZReport, Boolean desc, List<UUID> cashRegisterId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/reports/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from_date", fromDate));
        if (toDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to_date", toDate));
        if (shiftId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "shift_id", shiftId));
        if (serial != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serial", serial));
        if (isZReport != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is_z_report", isZReport));
        if (desc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("desc", desc));
        if (cashRegisterId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "cash_register_id", cashRegisterId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getSearchReportsValidateBeforeCall(OffsetDateTime fromDate, OffsetDateTime toDate, List<UUID> shiftId, String serial, Boolean isZReport, Boolean desc, List<UUID> cashRegisterId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getSearchReportsCall(fromDate, toDate, shiftId, serial, isZReport, desc, cashRegisterId, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Search Reports
     * Отримання звітів (X та Z) по обраним касам
     * @param fromDate  (optional)
     * @param toDate  (optional)
     * @param shiftId  (optional)
     * @param serial  (optional)
     * @param isZReport  (optional)
     * @param desc  (optional, default to false)
     * @param cashRegisterId  (optional, default to [])
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @return PaginatedResultReportModel_
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedResultReportModel_ getSearchReports(OffsetDateTime fromDate, OffsetDateTime toDate, List<UUID> shiftId, String serial, Boolean isZReport, Boolean desc, List<UUID> cashRegisterId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedResultReportModel_> resp = getSearchReportsWithHttpInfo(fromDate, toDate, shiftId, serial, isZReport, desc, cashRegisterId, limit, offset);
        return resp.getData();
    }

    /**
     * Get Search Reports
     * Отримання звітів (X та Z) по обраним касам
     * @param fromDate  (optional)
     * @param toDate  (optional)
     * @param shiftId  (optional)
     * @param serial  (optional)
     * @param isZReport  (optional)
     * @param desc  (optional, default to false)
     * @param cashRegisterId  (optional, default to [])
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PaginatedResultReportModel_&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedResultReportModel_> getSearchReportsWithHttpInfo(OffsetDateTime fromDate, OffsetDateTime toDate, List<UUID> shiftId, String serial, Boolean isZReport, Boolean desc, List<UUID> cashRegisterId, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getSearchReportsValidateBeforeCall(fromDate, toDate, shiftId, serial, isZReport, desc, cashRegisterId, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<PaginatedResultReportModel_>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Search Reports (asynchronously)
     * Отримання звітів (X та Z) по обраним касам
     * @param fromDate  (optional)
     * @param toDate  (optional)
     * @param shiftId  (optional)
     * @param serial  (optional)
     * @param isZReport  (optional)
     * @param desc  (optional, default to false)
     * @param cashRegisterId  (optional, default to [])
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSearchReportsAsync(OffsetDateTime fromDate, OffsetDateTime toDate, List<UUID> shiftId, String serial, Boolean isZReport, Boolean desc, List<UUID> cashRegisterId, Integer limit, Integer offset, final ApiCallback<PaginatedResultReportModel_> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSearchReportsValidateBeforeCall(fromDate, toDate, shiftId, serial, isZReport, desc, cashRegisterId, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedResultReportModel_>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getShift
     * @param shiftId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getShiftCall(UUID shiftId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/shifts/{shift_id}"
            .replaceAll("\\{" + "shift_id" + "\\}", apiClient.escapeString(shiftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getShiftValidateBeforeCall(UUID shiftId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'shiftId' is set
        if (shiftId == null) {
            throw new ApiException("Missing the required parameter 'shiftId' when calling getShift(Async)");
        }
        
        com.squareup.okhttp.Call call = getShiftCall(shiftId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Shift
     * Отримання інформації про зміну
     * @param shiftId  (required)
     * @return ShiftWithCashierAndCashRegister
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShiftWithCashierAndCashRegister getShiftById(UUID shiftId) throws ApiException {
        ApiResponse<ShiftWithCashierAndCashRegister> resp = getShiftWithHttpInfo(shiftId);
        return resp.getData();
    }

    /**
     * Get Shift
     * Отримання інформації про зміну
     * @param shiftId  (required)
     * @return ApiResponse&lt;ShiftWithCashierAndCashRegister&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShiftWithCashierAndCashRegister> getShiftWithHttpInfo(UUID shiftId) throws ApiException {
        com.squareup.okhttp.Call call = getShiftValidateBeforeCall(shiftId, null, null);
        Type localVarReturnType = new TypeToken<ShiftWithCashierAndCashRegister>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Shift (asynchronously)
     * Отримання інформації про зміну
     * @param shiftId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getShiftAsync(UUID shiftId, final ApiCallback<ShiftWithCashierAndCashRegister> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getShiftValidateBeforeCall(shiftId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ShiftWithCashierAndCashRegister>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getShiftsApiV1ShiftsGet
     * @param statuses Статус зміни (optional)
     * @param desc Зворотній порядок сортування (optional, default to false)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getShiftsApiV1ShiftsGetCall(List<ShiftStatus> statuses, Boolean desc, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/shifts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (statuses != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "statuses", statuses));
        if (desc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("desc", desc));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getShiftsApiV1ShiftsGetValidateBeforeCall(List<ShiftStatus> statuses, Boolean desc, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getShiftsApiV1ShiftsGetCall(statuses, desc, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Shifts
     * Отримання змін поточного касира
     * @param statuses Статус зміни (optional)
     * @param desc Зворотній порядок сортування (optional, default to false)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @return PaginatedResultShiftWithCashRegisterModel_
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedResultShiftWithCashRegisterModel_ getShiftsApiV1ShiftsGet(List<ShiftStatus> statuses, Boolean desc, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedResultShiftWithCashRegisterModel_> resp = getShiftsWithHttpInfo(statuses, desc, limit, offset);
        return resp.getData();
    }

    /**
     * Get Shifts
     * Отримання змін поточного касира
     * @param statuses Статус зміни (optional)
     * @param desc Зворотній порядок сортування (optional, default to false)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PaginatedResultShiftWithCashRegisterModel_&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedResultShiftWithCashRegisterModel_> getShiftsWithHttpInfo(List<ShiftStatus> statuses, Boolean desc, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getShiftsApiV1ShiftsGetValidateBeforeCall(statuses, desc, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<PaginatedResultShiftWithCashRegisterModel_>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Shifts (asynchronously)
     * Отримання змін поточного касира
     * @param statuses Статус зміни (optional)
     * @param desc Зворотній порядок сортування (optional, default to false)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getShiftsApiV1ShiftsGetAsync(List<ShiftStatus> statuses, Boolean desc, Integer limit, Integer offset, final ApiCallback<PaginatedResultShiftWithCashRegisterModel_> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getShiftsApiV1ShiftsGetValidateBeforeCall(statuses, desc, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedResultShiftWithCashRegisterModel_>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    
    public PaginatedResultShiftWithCashRegisterModel_ getActiveShifts() throws ApiException {
    	List<ShiftStatus> statuses = Arrays.asList( ShiftStatus.OPENING , ShiftStatus.OPENED );
        return getShiftsWithHttpInfo(statuses, null, null, null).getData();
    }
    
    /**
     * Build call for getTransactionApiV1TransactionsTransactionIdGet
     * @param transactionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionApiV1TransactionsTransactionIdGetCall(UUID transactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/transactions/{transaction_id}"
            .replaceAll("\\{" + "transaction_id" + "\\}", apiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getTransactionApiV1TransactionsTransactionIdGetValidateBeforeCall(UUID transactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling getTransactionApiV1TransactionsTransactionIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = getTransactionApiV1TransactionsTransactionIdGetCall(transactionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Transaction
     * 
     * @param transactionId  (required)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionModel getTransactionApiV1TransactionsTransactionIdGet(UUID transactionId) throws ApiException {
        ApiResponse<TransactionModel> resp = getTransactionApiV1TransactionsTransactionIdGetWithHttpInfo(transactionId);
        return resp.getData();
    }

    /**
     * Get Transaction
     * 
     * @param transactionId  (required)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionModel> getTransactionApiV1TransactionsTransactionIdGetWithHttpInfo(UUID transactionId) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionApiV1TransactionsTransactionIdGetValidateBeforeCall(transactionId, null, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Transaction (asynchronously)
     * 
     * @param transactionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionApiV1TransactionsTransactionIdGetAsync(UUID transactionId, final ApiCallback<TransactionModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionApiV1TransactionsTransactionIdGetValidateBeforeCall(transactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactions
     * @param status  (optional)
     * @param type  (optional)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionsCall(List<TransactionStatus> status, List<TransactionType> type, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "status", status));
        if (type != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "type", type));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getTransactionsValidateBeforeCall(List<TransactionStatus> status, List<TransactionType> type, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getTransactionsCall(status, type, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Transactions
     * 
     * @param status  (optional)
     * @param type  (optional)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @return PaginatedResultShortTransaction_
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedResultShortTransaction_ getTransactions(List<TransactionStatus> status, List<TransactionType> type, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedResultShortTransaction_> resp = getTransactionsWithHttpInfo(status, type, limit, offset);
        return resp.getData();
    }

    /**
     * Get Transactions
     * 
     * @param status  (optional)
     * @param type  (optional)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PaginatedResultShortTransaction_&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedResultShortTransaction_> getTransactionsWithHttpInfo(List<TransactionStatus> status, List<TransactionType> type, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionsValidateBeforeCall(status, type, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<PaginatedResultShortTransaction_>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Transactions (asynchronously)
     * 
     * @param status  (optional)
     * @param type  (optional)
     * @param limit  (optional, default to 25)
     * @param offset  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionsAsync(List<TransactionStatus> status, List<TransactionType> type, Integer limit, Integer offset, final ApiCallback<PaginatedResultShortTransaction_> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionsValidateBeforeCall(status, type, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedResultShortTransaction_>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWebhookInfo
     * @param xLicenseKey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWebhookInfoCall(String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));
        if (xLicenseKey != null)
        localVarHeaderParams.put("X-License-Key", apiClient.parameterToString(xLicenseKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getWebhookInfoValidateBeforeCall(String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xLicenseKey' is set
        if (xLicenseKey == null) {
            throw new ApiException("Missing the required parameter 'xLicenseKey' when calling getWebhookInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = getWebhookInfoCall(xLicenseKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Webhook Info
     * Даним методом можна перевірити стан налаштувань вебхуків
     * @param xLicenseKey  (required)
     * @return WebhookInfoSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookInfoSchema getWebhookInfo(String xLicenseKey) throws ApiException {
        ApiResponse<WebhookInfoSchema> resp = getWebhookInfoWithHttpInfo(xLicenseKey);
        return resp.getData();
    }

    /**
     * Get Webhook Info
     * Даним методом можна перевірити стан налаштувань вебхуків
     * @param xLicenseKey  (required)
     * @return ApiResponse&lt;WebhookInfoSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookInfoSchema> getWebhookInfoWithHttpInfo(String xLicenseKey) throws ApiException {
        com.squareup.okhttp.Call call = getWebhookInfoValidateBeforeCall(xLicenseKey, null, null);
        Type localVarReturnType = new TypeToken<WebhookInfoSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Webhook Info (asynchronously)
     * Даним методом можна перевірити стан налаштувань вебхуків
     * @param xLicenseKey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWebhookInfoAsync(String xLicenseKey, final ApiCallback<WebhookInfoSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWebhookInfoValidateBeforeCall(xLicenseKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhookInfoSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for goOfflineAction
     * @param body  (optional)
     * @param xLicenseKey  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call goOfflineActionCall(GoOfflinePayload body, String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/cash-registers/go-offline";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));
        if (xLicenseKey != null)
        localVarHeaderParams.put("X-License-Key", apiClient.parameterToString(xLicenseKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call goOfflineActionValidateBeforeCall(GoOfflinePayload body, String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = goOfflineActionCall(body, xLicenseKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Go Offline Action
     * Ручне переведення поточної каси в офлайн. Після виклику цього методу при наступній відправці чеків спроби перевірки зв&#x27;язку з ДПС виконуватися не будуть - для переведення каси в онлайн та відправки ланцюжка чеків потрібно буде викликати метод go-online
     * @param body  (optional)
     * @param xLicenseKey  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object goOfflineAction(GoOfflinePayload body, String xLicenseKey) throws ApiException {
        ApiResponse<Object> resp = goOfflineActionWithHttpInfo(body, xLicenseKey);
        return resp.getData();
    }

    /**
     * Go Offline Action
     * Ручне переведення поточної каси в офлайн. Після виклику цього методу при наступній відправці чеків спроби перевірки зв&#x27;язку з ДПС виконуватися не будуть - для переведення каси в онлайн та відправки ланцюжка чеків потрібно буде викликати метод go-online
     * @param body  (optional)
     * @param xLicenseKey  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> goOfflineActionWithHttpInfo(GoOfflinePayload body, String xLicenseKey) throws ApiException {
        com.squareup.okhttp.Call call = goOfflineActionValidateBeforeCall(body, xLicenseKey, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Go Offline Action (asynchronously)
     * Ручне переведення поточної каси в офлайн. Після виклику цього методу при наступній відправці чеків спроби перевірки зв&#x27;язку з ДПС виконуватися не будуть - для переведення каси в онлайн та відправки ланцюжка чеків потрібно буде викликати метод go-online
     * @param body  (optional)
     * @param xLicenseKey  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call goOfflineActionAsync(GoOfflinePayload body, String xLicenseKey, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = goOfflineActionValidateBeforeCall(body, xLicenseKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for goOnlineAction
     * @param xLicenseKey  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call goOnlineActionCall(String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/cash-registers/go-online";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));
        if (xLicenseKey != null)
        localVarHeaderParams.put("X-License-Key", apiClient.parameterToString(xLicenseKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call goOnlineActionValidateBeforeCall(String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = goOnlineActionCall(xLicenseKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Go Online Action
     * Ручне переведення поточної каси в онлайн. Ініціює відправку до ДПС всіх транзакцій по даній касі, створених в оффлайн. Першою повинна бути транзакція \&quot;перехід в оффлайн\&quot; (транзакції вибираються в порядку створення, отже її дата та час створення повинні бути найменшими). Каса переходить в онлайн лише після вдалої відправки всіх транзакцій.
     * @param xLicenseKey  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object goOnlineAction(String xLicenseKey) throws ApiException {
        ApiResponse<Object> resp = goOnlineActionWithHttpInfo(xLicenseKey);
        return resp.getData();
    }

    /**
     * Go Online Action
     * Ручне переведення поточної каси в онлайн. Ініціює відправку до ДПС всіх транзакцій по даній касі, створених в оффлайн. Першою повинна бути транзакція \&quot;перехід в оффлайн\&quot; (транзакції вибираються в порядку створення, отже її дата та час створення повинні бути найменшими). Каса переходить в онлайн лише після вдалої відправки всіх транзакцій.
     * @param xLicenseKey  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> goOnlineActionWithHttpInfo(String xLicenseKey) throws ApiException {
        com.squareup.okhttp.Call call = goOnlineActionValidateBeforeCall(xLicenseKey, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Go Online Action (asynchronously)
     * Ручне переведення поточної каси в онлайн. Ініціює відправку до ДПС всіх транзакцій по даній касі, створених в оффлайн. Першою повинна бути транзакція \&quot;перехід в оффлайн\&quot; (транзакції вибираються в порядку створення, отже її дата та час створення повинні бути найменшими). Каса переходить в онлайн лише після вдалої відправки всіх транзакцій.
     * @param xLicenseKey  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call goOnlineActionAsync(String xLicenseKey, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = goOnlineActionValidateBeforeCall(xLicenseKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pingTaxServiceAction
     * @param xLicenseKey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pingTaxServiceActionCall(String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/cash-registers/ping-tax-service";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));
        if (xLicenseKey != null)
        localVarHeaderParams.put("X-License-Key", apiClient.parameterToString(xLicenseKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call pingTaxServiceActionValidateBeforeCall(String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xLicenseKey' is set
        if (xLicenseKey == null) {
            throw new ApiException("Missing the required parameter 'xLicenseKey' when calling pingTaxServiceAction(Async)");
        }
        
        com.squareup.okhttp.Call call = pingTaxServiceActionCall(xLicenseKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Ping Tax Service Action
     * Перевірка зв&#x27;язку з ДПС. При наявності зв&#x27;язку повертає статус DONE
     * @param xLicenseKey  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object pingTaxServiceAction(String xLicenseKey) throws ApiException {
        ApiResponse<Object> resp = pingTaxServiceActionWithHttpInfo(xLicenseKey);
        return resp.getData();
    }

    /**
     * Ping Tax Service Action
     * Перевірка зв&#x27;язку з ДПС. При наявності зв&#x27;язку повертає статус DONE
     * @param xLicenseKey  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> pingTaxServiceActionWithHttpInfo(String xLicenseKey) throws ApiException {
        com.squareup.okhttp.Call call = pingTaxServiceActionValidateBeforeCall(xLicenseKey, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Ping Tax Service Action (asynchronously)
     * Перевірка зв&#x27;язку з ДПС. При наявності зв&#x27;язку повертає статус DONE
     * @param xLicenseKey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pingTaxServiceActionAsync(String xLicenseKey, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pingTaxServiceActionValidateBeforeCall(xLicenseKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runOrdersSynchronization
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runOrdersSynchronizationCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/orders/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call runOrdersSynchronizationValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = runOrdersSynchronizationCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Run Orders Synchronization
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object runOrdersSynchronization() throws ApiException {
        ApiResponse<Object> resp = runOrdersSynchronizationWithHttpInfo();
        return resp.getData();
    }

    /**
     * Run Orders Synchronization
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> runOrdersSynchronizationWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = runOrdersSynchronizationValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run Orders Synchronization (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runOrdersSynchronizationAsync(final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runOrdersSynchronizationValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendReceiptToEmail
     * @param body  (required)
     * @param receiptId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendReceiptToEmailCall(List<String> body, UUID receiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/receipts/{receipt_id}/email"
            .replaceAll("\\{" + "receipt_id" + "\\}", apiClient.escapeString(receiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call sendReceiptToEmailValidateBeforeCall(List<String> body, UUID receiptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling sendReceiptToEmail(Async)");
        }
        // verify the required parameter 'receiptId' is set
        if (receiptId == null) {
            throw new ApiException("Missing the required parameter 'receiptId' when calling sendReceiptToEmail(Async)");
        }
        
        com.squareup.okhttp.Call call = sendReceiptToEmailCall(body, receiptId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send Receipt To Email
     * 
     * @param body  (required)
     * @param receiptId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object sendReceiptToEmail(List<String> body, UUID receiptId) throws ApiException {
        ApiResponse<Object> resp = sendReceiptToEmailWithHttpInfo(body, receiptId);
        return resp.getData();
    }

    /**
     * Send Receipt To Email
     * 
     * @param body  (required)
     * @param receiptId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> sendReceiptToEmailWithHttpInfo(List<String> body, UUID receiptId) throws ApiException {
        com.squareup.okhttp.Call call = sendReceiptToEmailValidateBeforeCall(body, receiptId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send Receipt To Email (asynchronously)
     * 
     * @param body  (required)
     * @param receiptId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendReceiptToEmailAsync(List<String> body, UUID receiptId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendReceiptToEmailValidateBeforeCall(body, receiptId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setWebhook
     * @param body  (required)
     * @param xLicenseKey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setWebhookCall(SetWebhookPayload body, String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));
        if (xLicenseKey != null)
        localVarHeaderParams.put("X-License-Key", apiClient.parameterToString(xLicenseKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call setWebhookValidateBeforeCall(SetWebhookPayload body, String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setWebhook(Async)");
        }
        // verify the required parameter 'xLicenseKey' is set
        if (xLicenseKey == null) {
            throw new ApiException("Missing the required parameter 'xLicenseKey' when calling setWebhook(Async)");
        }
        
        com.squareup.okhttp.Call call = setWebhookCall(body, xLicenseKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set Webhook
     * Даним методом встановлюється URL адреса куди при фіскалізації чеків, відкритті та закритті змін а також службових внесеннях та вилученнях буде надіслано POST запити з відповідною інформацією.  Налаштування зберігаються для кожної каси окремо.  Указана в даному запиті адреса повинна приймати POST запити із указаною в документації схемою та повертати статус-код 200, у разі якщо статус-код буде &gt;&#x3D; 400 або час очікування відповіді більше 60 секунд запит буде повтрорюватись протягом 4-х годин кожні 10 хвилин.  Під час встановлення налаштувань сервером CheckBox генерується секретний ключ та повертається у відповіді на даний метод, за допомогою цього ключа можна перевірити чи дійсно запит виконується серверами CheckBox.  Під час виконання виклику вебхуків тіло запиту хешується за допомогою алгоритму: &#x60;&#x60;&#x60; encodeBase64(     HmacSHA256(         getBytesUTF-8(             request_body         )     ) ) &#x60;&#x60;&#x60; - &#x60;encodeBase64&#x60; - функція перетворення бінарних даних в Base64 формат [wiki](https://ru.wikipedia.org/wiki/Base64), - &#x60;HmacSHA256&#x60; - функция створення хешу підпису данных [wiki](https://ru.wikipedia.org/wiki/HMAC), - &#x60;getBytesUTF-8&#x60; - функция перетворення рядка в бінарне представлення (в кодуванні UTF-8) [wiki](https://ru.wikipedia.org/wiki/UTF-8), - &#x60;request_body&#x60; - тіло запиту  з використання ключа та записується до заголовку &#x60;x-request-signature&#x60;, таким чином на стороні де отримується запит можна перевірити дійсність даних за тим же алгоритмом.
     * @param body  (required)
     * @param xLicenseKey  (required)
     * @return WebhookInfoResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookInfoResponseSchema setWebhook(SetWebhookPayload body, String xLicenseKey) throws ApiException {
        ApiResponse<WebhookInfoResponseSchema> resp = setWebhookWithHttpInfo(body, xLicenseKey);
        return resp.getData();
    }

    /**
     * Set Webhook
     * Даним методом встановлюється URL адреса куди при фіскалізації чеків, відкритті та закритті змін а також службових внесеннях та вилученнях буде надіслано POST запити з відповідною інформацією.  Налаштування зберігаються для кожної каси окремо.  Указана в даному запиті адреса повинна приймати POST запити із указаною в документації схемою та повертати статус-код 200, у разі якщо статус-код буде &gt;&#x3D; 400 або час очікування відповіді більше 60 секунд запит буде повтрорюватись протягом 4-х годин кожні 10 хвилин.  Під час встановлення налаштувань сервером CheckBox генерується секретний ключ та повертається у відповіді на даний метод, за допомогою цього ключа можна перевірити чи дійсно запит виконується серверами CheckBox.  Під час виконання виклику вебхуків тіло запиту хешується за допомогою алгоритму: &#x60;&#x60;&#x60; encodeBase64(     HmacSHA256(         getBytesUTF-8(             request_body         )     ) ) &#x60;&#x60;&#x60; - &#x60;encodeBase64&#x60; - функція перетворення бінарних даних в Base64 формат [wiki](https://ru.wikipedia.org/wiki/Base64), - &#x60;HmacSHA256&#x60; - функция створення хешу підпису данных [wiki](https://ru.wikipedia.org/wiki/HMAC), - &#x60;getBytesUTF-8&#x60; - функция перетворення рядка в бінарне представлення (в кодуванні UTF-8) [wiki](https://ru.wikipedia.org/wiki/UTF-8), - &#x60;request_body&#x60; - тіло запиту  з використання ключа та записується до заголовку &#x60;x-request-signature&#x60;, таким чином на стороні де отримується запит можна перевірити дійсність даних за тим же алгоритмом.
     * @param body  (required)
     * @param xLicenseKey  (required)
     * @return ApiResponse&lt;WebhookInfoResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookInfoResponseSchema> setWebhookWithHttpInfo(SetWebhookPayload body, String xLicenseKey) throws ApiException {
        com.squareup.okhttp.Call call = setWebhookValidateBeforeCall(body, xLicenseKey, null, null);
        Type localVarReturnType = new TypeToken<WebhookInfoResponseSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set Webhook (asynchronously)
     * Даним методом встановлюється URL адреса куди при фіскалізації чеків, відкритті та закритті змін а також службових внесеннях та вилученнях буде надіслано POST запити з відповідною інформацією.  Налаштування зберігаються для кожної каси окремо.  Указана в даному запиті адреса повинна приймати POST запити із указаною в документації схемою та повертати статус-код 200, у разі якщо статус-код буде &gt;&#x3D; 400 або час очікування відповіді більше 60 секунд запит буде повтрорюватись протягом 4-х годин кожні 10 хвилин.  Під час встановлення налаштувань сервером CheckBox генерується секретний ключ та повертається у відповіді на даний метод, за допомогою цього ключа можна перевірити чи дійсно запит виконується серверами CheckBox.  Під час виконання виклику вебхуків тіло запиту хешується за допомогою алгоритму: &#x60;&#x60;&#x60; encodeBase64(     HmacSHA256(         getBytesUTF-8(             request_body         )     ) ) &#x60;&#x60;&#x60; - &#x60;encodeBase64&#x60; - функція перетворення бінарних даних в Base64 формат [wiki](https://ru.wikipedia.org/wiki/Base64), - &#x60;HmacSHA256&#x60; - функция створення хешу підпису данных [wiki](https://ru.wikipedia.org/wiki/HMAC), - &#x60;getBytesUTF-8&#x60; - функция перетворення рядка в бінарне представлення (в кодуванні UTF-8) [wiki](https://ru.wikipedia.org/wiki/UTF-8), - &#x60;request_body&#x60; - тіло запиту  з використання ключа та записується до заголовку &#x60;x-request-signature&#x60;, таким чином на стороні де отримується запит можна перевірити дійсність даних за тим же алгоритмом.
     * @param body  (required)
     * @param xLicenseKey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setWebhookAsync(SetWebhookPayload body, String xLicenseKey, final ApiCallback<WebhookInfoResponseSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setWebhookValidateBeforeCall(body, xLicenseKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhookInfoResponseSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for signInCashier
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signInCashierCall(CashierSignIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/cashier/signin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call signInCashierValidateBeforeCall(CashierSignIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling signInCashier(Async)");
        }
        
        com.squareup.okhttp.Call call = signInCashierCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Sign In Cashier
     * Вхід користувача (касира) за допомогою логіна та паролю
     * @param body  (required)
     * @return CashierAccessTokenResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CashierAccessTokenResponseModel signIn(CashierSignIn body) throws ApiException {
        ApiResponse<CashierAccessTokenResponseModel> resp = signInWithHTTPInfo(body);
        return resp.getData();
    }
    /**
     * Sign In Cashier
     * Вхід користувача (касира) за допомогою логіна та паролю
     * @param login  (required)
     * @param password  (required)
     * @return CashierAccessTokenResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CashierAccessTokenResponseModel signIn(String login, String passwd) throws ApiException {
    	CashierSignIn cred = new CashierSignIn();
    	cred.setLogin(login);
    	cred.setPassword(passwd);
    	return signIn(cred);
    }
    /**
     * Sign In Cashier
     * Вхід користувача (касира) за допомогою логіна та паролю
     * @param body  (required)
     * @return ApiResponse&lt;CashierAccessTokenResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CashierAccessTokenResponseModel> signInWithHTTPInfo(CashierSignIn body) throws ApiException {
        com.squareup.okhttp.Call call = signInCashierValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CashierAccessTokenResponseModel>(){}.getType();
        ApiResponse<CashierAccessTokenResponseModel> response = apiClient.execute(call, localVarReturnType);
        apiClient.setAutorized(false);
        if (response.getStatusCode() == 200){
        	if (response.getData() == null)
        			throw new ApiException("authorization failed, the response body is empty");
        	this.apiClient.setAccessToken(response.getData().getAccessToken());
        	apiClient.setAutorized(true);
        }
        return response;
    }
    
    public ApiResponse<CashierAccessTokenResponseModel> signInWithHTTPInfo(String login, String passwd) throws ApiException {
    	CashierSignIn cred = new CashierSignIn();
    	cred.setLogin(login);
    	cred.setPassword(passwd);
    	return signInWithHTTPInfo(cred);
    }
    
    public com.squareup.okhttp.Call signInAsync(String login, String passwd, final ApiCallback<CashierAccessTokenResponseModel> callback) throws ApiException {
    	CashierSignIn cred = new CashierSignIn();
    	cred.setLogin(login);
    	cred.setPassword(passwd);
    	return signInAsync(cred, callback);
    }
    /**
     * Sign In Cashier (asynchronously)
     * Вхід користувача (касира) за допомогою логіна та паролю
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signInAsync(CashierSignIn body, final ApiCallback<CashierAccessTokenResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signInCashierValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CashierAccessTokenResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for signInCashier
     * @param body  (required)
     * @param xLicenseKey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signInCashierCall(CashierSignInPinCode body, String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/cashier/signinPinCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));
        if (xLicenseKey != null)
        localVarHeaderParams.put("X-License-Key", apiClient.parameterToString(xLicenseKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call signInCashierValidateBeforeCall(CashierSignInPinCode body, String xLicenseKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling signInCashier(Async)");
        }
        // verify the required parameter 'xLicenseKey' is set
        if (xLicenseKey == null) {
            throw new ApiException("Missing the required parameter 'xLicenseKey' when calling signInCashier(Async)");
        }
        
        com.squareup.okhttp.Call call = signInCashierCall(body, xLicenseKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Sign In Cashier Via Pin Code
     * Вхід користувача (касира) за допомогою пін-коду. Необхідно для касових реєстраторів типу \&quot;AGENT\&quot;
     * @param body  (required)
     * @param xLicenseKey  (required)
     * @return CashierAccessTokenResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CashierAccessTokenResponseModel signInCashier(CashierSignInPinCode body, String xLicenseKey) throws ApiException {
        ApiResponse<CashierAccessTokenResponseModel> resp = signInCashierWithHttpInfo(body, xLicenseKey);
        return resp.getData();
    }

    /**
     * Sign In Cashier Via Pin Code
     * Вхід користувача (касира) за допомогою пін-коду. Необхідно для касових реєстраторів типу \&quot;AGENT\&quot;
     * @param body  (required)
     * @param xLicenseKey  (required)
     * @return ApiResponse&lt;CashierAccessTokenResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CashierAccessTokenResponseModel> signInCashierWithHttpInfo(CashierSignInPinCode body, String xLicenseKey) throws ApiException {
        com.squareup.okhttp.Call call = signInCashierValidateBeforeCall(body, xLicenseKey, null, null);
        Type localVarReturnType = new TypeToken<CashierAccessTokenResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sign In Cashier Via Pin Code (asynchronously)
     * Вхід користувача (касира) за допомогою пін-коду. Необхідно для касових реєстраторів типу \&quot;AGENT\&quot;
     * @param body  (required)
     * @param xLicenseKey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signInCashierAsync(CashierSignInPinCode body, String xLicenseKey, final ApiCallback<CashierAccessTokenResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signInCashierValidateBeforeCall(body, xLicenseKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CashierAccessTokenResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for signInCashierViaSignature
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signInCashierViaSignatureCall(CashierSignInSignature body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/cashier/signinSignature";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call signInCashierViaSignatureCallValidateBeforeCall(CashierSignInSignature body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling signInCashierViaSignature(Async)");
        }
        
        com.squareup.okhttp.Call call = signInCashierViaSignatureCall(body, progressListener, progressRequestListener);
        return call;
        
    }

    /**
     * Sign In Cashier Via Signature
     * Вхід користувача (касира) за допомогою КЕП. Необхідно для касирів з типом підпису \&quot;API\&quot;
     * @param body  (required)
     * @return CashierAccessTokenResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CashierAccessTokenResponseModel signInCashierViaSignature(CashierSignInSignature body) throws ApiException {
        ApiResponse<CashierAccessTokenResponseModel> resp = signInCashierViaSignatureWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Sign In Cashier Via Signature
     * Вхід користувача (касира) за допомогою КЕП. Необхідно для касирів з типом підпису \&quot;API\&quot;
     * @param body  (required)
     * @return ApiResponse&lt;CashierAccessTokenResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CashierAccessTokenResponseModel> signInCashierViaSignatureWithHttpInfo(CashierSignInSignature body) throws ApiException {
        com.squareup.okhttp.Call call = signInCashierViaSignatureCallValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CashierAccessTokenResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sign In Cashier Via Signature (asynchronously)
     * Вхід користувача (касира) за допомогою КЕП. Необхідно для касирів з типом підпису \&quot;API\&quot;
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signInCashierViaSignatureAsync(CashierSignInSignature body, final ApiCallback<CashierAccessTokenResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signInCashierViaSignatureCallValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CashierAccessTokenResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for signOutCashier
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signOut(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/cashier/signout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call signOutCashierValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = signOut(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sign Out Cashier
     * Завершення сесії користувача (касира) з поточним токеном доступу
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object signOutCashier() throws ApiException {
        ApiResponse<Object> resp = signOutCashierWithHttpInfo();
        return resp.getData();
    }

    /**
     * Sign Out Cashier
     * Завершення сесії користувача (касира) з поточним токеном доступу
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> signOutCashierWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = signOutCashierValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sign Out Cashier (asynchronously)
     * Завершення сесії користувача (касира) з поточним токеном доступу
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signOutCashierAsync(final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signOutCashierValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTransactionApiV1TransactionsTransactionIdPatch
     * @param body  (required)
     * @param transactionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTransactionApiV1TransactionsTransactionIdPatchCall(UpdateTransactionPayload body, UUID transactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/transactions/{transaction_id}"
            .replaceAll("\\{" + "transaction_id" + "\\}", apiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.getCashierToken() };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

}
