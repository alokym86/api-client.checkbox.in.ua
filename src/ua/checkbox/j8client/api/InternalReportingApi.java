/*
 * test checkbox API
 * Core API of Software Registrar of Settlement Operations
 *
 * OpenAPI spec version: 0.1.26
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ua.checkbox.j8client.api;

import com.google.gson.reflect.TypeToken;

import ua.checkbox.j8client.ApiCallback;
import ua.checkbox.j8client.ApiClient;
import ua.checkbox.j8client.ApiException;
import ua.checkbox.j8client.ApiResponse;
import ua.checkbox.j8client.Configuration;
import ua.checkbox.j8client.Pair;
import ua.checkbox.j8client.ProgressRequestBody;
import ua.checkbox.j8client.ProgressResponseBody;
import ua.checkbox.j8client.model.HTTPValidationError;
import ua.checkbox.j8client.model.ReportTaskSchema;

import java.io.IOException;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InternalReportingApi {
    private ApiClient apiClient;

    public InternalReportingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InternalReportingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getReportTaskByIdInternalReportingReportTaskIdAttachmentsReportXlsxGet
     * @param reportTaskId  (required)
     * @param xClientName Наза клієнту або сервісу що інтегрується з API, наприклад &#x27;My Custom SDK&#x27; (optional)
     * @param xClientVersion Номер версії клінту що інтегрується з API, наприклад &#x27;v1.2.5&#x27; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportTaskByIdInternalReportingReportTaskIdAttachmentsReportXlsxGetCall(UUID reportTaskId, String xClientName, String xClientVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/_internal/reporting/{report_task_id}/attachments/report.xlsx"
            .replaceAll("\\{" + "report_task_id" + "\\}", apiClient.escapeString(reportTaskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "HTTPBasic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportTaskByIdInternalReportingReportTaskIdAttachmentsReportXlsxGetValidateBeforeCall(UUID reportTaskId, String xClientName, String xClientVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'reportTaskId' is set
        if (reportTaskId == null) {
            throw new ApiException("Missing the required parameter 'reportTaskId' when calling getReportTaskByIdInternalReportingReportTaskIdAttachmentsReportXlsxGet(Async)");
        }
        
        com.squareup.okhttp.Call call = getReportTaskByIdInternalReportingReportTaskIdAttachmentsReportXlsxGetCall(reportTaskId, xClientName, xClientVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Report Task By Id
     * 
     * @param reportTaskId  (required)
     * @param xClientName Наза клієнту або сервісу що інтегрується з API, наприклад &#x27;My Custom SDK&#x27; (optional)
     * @param xClientVersion Номер версії клінту що інтегрується з API, наприклад &#x27;v1.2.5&#x27; (optional)
     * @return ReportTaskSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportTaskSchema getReportTaskByIdInternalReportingReportTaskIdAttachmentsReportXlsxGet(UUID reportTaskId, String xClientName, String xClientVersion) throws ApiException {
        ApiResponse<ReportTaskSchema> resp = getReportTaskByIdInternalReportingReportTaskIdAttachmentsReportXlsxGetWithHttpInfo(reportTaskId, xClientName, xClientVersion);
        return resp.getData();
    }

    /**
     * Get Report Task By Id
     * 
     * @param reportTaskId  (required)
     * @param xClientName Наза клієнту або сервісу що інтегрується з API, наприклад &#x27;My Custom SDK&#x27; (optional)
     * @param xClientVersion Номер версії клінту що інтегрується з API, наприклад &#x27;v1.2.5&#x27; (optional)
     * @return ApiResponse&lt;ReportTaskSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportTaskSchema> getReportTaskByIdInternalReportingReportTaskIdAttachmentsReportXlsxGetWithHttpInfo(UUID reportTaskId, String xClientName, String xClientVersion) throws ApiException {
        com.squareup.okhttp.Call call = getReportTaskByIdInternalReportingReportTaskIdAttachmentsReportXlsxGetValidateBeforeCall(reportTaskId, xClientName, xClientVersion, null, null);
        Type localVarReturnType = new TypeToken<ReportTaskSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Report Task By Id (asynchronously)
     * 
     * @param reportTaskId  (required)
     * @param xClientName Наза клієнту або сервісу що інтегрується з API, наприклад &#x27;My Custom SDK&#x27; (optional)
     * @param xClientVersion Номер версії клінту що інтегрується з API, наприклад &#x27;v1.2.5&#x27; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportTaskByIdInternalReportingReportTaskIdAttachmentsReportXlsxGetAsync(UUID reportTaskId, String xClientName, String xClientVersion, final ApiCallback<ReportTaskSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportTaskByIdInternalReportingReportTaskIdAttachmentsReportXlsxGetValidateBeforeCall(reportTaskId, xClientName, xClientVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportTaskSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReportTaskByIdInternalReportingReportTaskIdGet
     * @param reportTaskId  (required)
     * @param xClientName Наза клієнту або сервісу що інтегрується з API, наприклад &#x27;My Custom SDK&#x27; (optional)
     * @param xClientVersion Номер версії клінту що інтегрується з API, наприклад &#x27;v1.2.5&#x27; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportTaskByIdInternalReportingReportTaskIdGetCall(UUID reportTaskId, String xClientName, String xClientVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/_internal/reporting/{report_task_id}"
            .replaceAll("\\{" + "report_task_id" + "\\}", apiClient.escapeString(reportTaskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientName != null)
        localVarHeaderParams.put("X-Client-Name", apiClient.parameterToString(xClientName));
        if (xClientVersion != null)
        localVarHeaderParams.put("X-Client-Version", apiClient.parameterToString(xClientVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "HTTPBasic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportTaskByIdInternalReportingReportTaskIdGetValidateBeforeCall(UUID reportTaskId, String xClientName, String xClientVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'reportTaskId' is set
        if (reportTaskId == null) {
            throw new ApiException("Missing the required parameter 'reportTaskId' when calling getReportTaskByIdInternalReportingReportTaskIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = getReportTaskByIdInternalReportingReportTaskIdGetCall(reportTaskId, xClientName, xClientVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Report Task By Id
     * 
     * @param reportTaskId  (required)
     * @param xClientName Наза клієнту або сервісу що інтегрується з API, наприклад &#x27;My Custom SDK&#x27; (optional)
     * @param xClientVersion Номер версії клінту що інтегрується з API, наприклад &#x27;v1.2.5&#x27; (optional)
     * @return ReportTaskSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportTaskSchema getReportTaskByIdInternalReportingReportTaskIdGet(UUID reportTaskId, String xClientName, String xClientVersion) throws ApiException {
        ApiResponse<ReportTaskSchema> resp = getReportTaskByIdInternalReportingReportTaskIdGetWithHttpInfo(reportTaskId, xClientName, xClientVersion);
        return resp.getData();
    }

    /**
     * Get Report Task By Id
     * 
     * @param reportTaskId  (required)
     * @param xClientName Наза клієнту або сервісу що інтегрується з API, наприклад &#x27;My Custom SDK&#x27; (optional)
     * @param xClientVersion Номер версії клінту що інтегрується з API, наприклад &#x27;v1.2.5&#x27; (optional)
     * @return ApiResponse&lt;ReportTaskSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportTaskSchema> getReportTaskByIdInternalReportingReportTaskIdGetWithHttpInfo(UUID reportTaskId, String xClientName, String xClientVersion) throws ApiException {
        com.squareup.okhttp.Call call = getReportTaskByIdInternalReportingReportTaskIdGetValidateBeforeCall(reportTaskId, xClientName, xClientVersion, null, null);
        Type localVarReturnType = new TypeToken<ReportTaskSchema>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Report Task By Id (asynchronously)
     * 
     * @param reportTaskId  (required)
     * @param xClientName Наза клієнту або сервісу що інтегрується з API, наприклад &#x27;My Custom SDK&#x27; (optional)
     * @param xClientVersion Номер версії клінту що інтегрується з API, наприклад &#x27;v1.2.5&#x27; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportTaskByIdInternalReportingReportTaskIdGetAsync(UUID reportTaskId, String xClientName, String xClientVersion, final ApiCallback<ReportTaskSchema> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportTaskByIdInternalReportingReportTaskIdGetValidateBeforeCall(reportTaskId, xClientName, xClientVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportTaskSchema>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
